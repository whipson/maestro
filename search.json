[{"path":"https://whipson.github.io/maestro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 maestro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"Quick Start","text":"Create maestro project existing project new project using create_maestro() New Project wizard RStudio. creates orchestrator script folder pipelines one sample pipeline. project look something like :","code":"library(maestro) maestro_project ├── maestro_project.Rproj ├── orchestrator.R └── pipelines     ├── my_pipe.R     └── another_pipe.R"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Quick Start","text":"Pipelines jobs want automate, schedule, monitor. part, ’re regular R functions special sprinkling comments.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"anatomy-of-a-pipeline","dir":"Articles","previous_headings":"Pipelines","what":"Anatomy of a Pipeline","title":"Quick Start","text":"pipeline simply R function decorators called maestro tags. Maestro tags special code comments used communicating scheduling configuration pipeline orchestrator. Let’s take quick look sample my_pipe.R: my_pipe function empty body - right now won’t anything. comments interpreted maestro “function scheduled run every day starting 2024-05-24 (00:00:00) UTC time”. maestroFrequency maestroStartTime important tags scheduling. Frequency often want pipeline run can formatted single string like hourly, daily, weekly, biweekly, etc. number unit (e.g., 1 day, 3 hours, etc.). Note don’t need provide tags. single maestro tag enough distinguish pipeline. Pipelines missing tags use consistent defaults (e.g., maestroFrequency missing default 1 day/daily). use cases, actual code inside my_pipe run ETL job (extract data source, transform , load file system database). technical terms, ’s side effect code return value important. ’s realistic, albeit impractical, example:","code":"#' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24 #' @maestroTz UTC #' @maestroLogLevel INFO  my_pipe <- function() {    # Pipeline code } #' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24 #' @maestroTz UTC #' @maestroLogLevel INFO  my_pipe <- function() {    random_data <- data.frame(     letters = sample(letters, 10),     numbers = sample.int(10)   )      write.csv(random_data, file = tempfile()) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"adding-new-pipelines","dir":"Articles","previous_headings":"Pipelines","what":"Adding New Pipelines","title":"Quick Start","text":"project single pipeline ok, maestro useful multiple jobs run. can add pipelines pipelines directory manually use create_pipeline():","code":"create_pipeline(   pipe_name = \"another_pipeline\",   pipeline_dir = \"pipelines\",   frequency = \"1 hour\",   start_time = \"2024-05-17 15:00:00\",   tz = \"America/Halifax\",   log_level = \"ERROR\" )"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"orchestrator","dir":"Articles","previous_headings":"","what":"Orchestrator","title":"Quick Start","text":"orchestrator process schedules monitors pipelines.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"anatomy-of-the-orchestrator","dir":"Articles","previous_headings":"Orchestrator","what":"Anatomy of the Orchestrator","title":"Quick Start","text":"orchestrator can R script, Quarto/RMarkdown doc, ’ll use regular R script. ’ll run maestro functions. two main functions build_schedule() run_schedule(). Building schedule gets maestro look pipelines pipelines folder creates schedule object. , pass run_schedule() along often orchestrator supposed run. important tell maestro often ’ll checking pipelines using orch_frequency parameter. , ’re informing orchestrator running every 1 hour. Importantly, isn’t maestro’s job actually run often - ’s job make sure runs frequency (e.g., deploying via cron cloud environment code can scheduled).1","code":"library(maestro)  schedule <- build_schedule()  output <- run_schedule(   schedule,   orch_frequency = \"1 hour\" ) ℹ 1 script successfully parsed                                                                                                                                    ── [2025-02-18 18:07:58]                                                         Running pipelines ▶                                                                                                                                               ── [2025-02-18 18:07:58]                                                         Pipeline execution completed ■ | 0.02 sec elapsed                                ✔ 0 successes | → 1 skipped | ! 0 warnings | ✖ 0 errors | ◼ 1 total              ────────────────────────────────────────────────────────────────────────────────                                                                                  ── Next scheduled pipelines ❯                                                    Pipe name | Next scheduled run                                                   • my_pipe | 2025-02-19"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"what-is-maestro","dir":"Articles","previous_headings":"","what":"What is maestro?","title":"Motivation and Concepts","text":"maestro R package creating orchestrating many data pipelines R. several batch jobs/pipelines want schedule monitor within single R project, maestro . decorate R functions special roxygen2 tags execute orchestrator script:","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"why-do-i-need-maestro","dir":"Articles","previous_headings":"","what":"Why do I need maestro?","title":"Motivation and Concepts","text":"Running data pipelines essential component data engineering. unusual dozens pipelines need run different frequencies, go deploy pipelines scheduling monitoring quickly becomes unwieldy. Perhaps ’ve considered moving heftier orchestration suites Airflow, Dagster, others require learning entirely new skills pose challenges deployment. maestro allows orchestrate pipelines entirely R. need environment deploy maestro project.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Motivation and Concepts","text":"pipeline process takes raw data (often external source) moves somewhere else often transforming along way. Think pipeline factory assembly line data raw material. data travels along pipeline, undergoes various transformations—cleaning, aggregation, analysis—making increasingly refined valuable. refined product stored new location can used either end consumer another pipeline. prototypical type pipeline data engineering ETL (Extract, Transform, Load), data extracted source, transformed, loaded storage. pipeline needs run regularly automatically process new data. analytic workloads undergo batch processing - processing data discrete timed batches. scheduled batch processing, engineer decide often want pipeline run (every day 12:00?, every hour 15th minute?). maestro pipeline R function roxygen2 comments scheduling configuration:","code":"#' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24  my_pipe <- function() {    random_data <- data.frame(     letters = sample(letters, 10),     numbers = sample.int(10)   )      write.csv(random_data, file = tempfile()) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"scheduled-batch-processing","dir":"Articles","previous_headings":"","what":"Scheduled Batch Processing","title":"Motivation and Concepts","text":"pipeline needs run regularly automatically process new data. analytic workloads undergo batch processing - processing data discrete timed batches. scheduled batch processing, engineer decide often want pipeline run (every day 12:00?, every hour 15th minute?). maestro pipeline R function roxygen2 comments scheduling configuration:","code":"#' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24  my_pipe <- function() {    random_data <- data.frame(     letters = sample(letters, 10),     numbers = sample.int(10)   )      write.csv(random_data, file = tempfile()) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"orchestrator","dir":"Articles","previous_headings":"","what":"Orchestrator","title":"Motivation and Concepts","text":"orchestrator process triggers pipelines run. Think factory manager turns various assembly lines needed. also monitors pipelines ensure smooth operation. Just like factory manager, orchestrator operates “shifts” needs scheduled perform ’s job . Importantly, maestro needs know often ’re going run orchestrator. Unlike orchestration tools , maestro isn’t intended continuously running, saves compute resources. means pipelines won’t necessarily run exactly ’re scheduled . concept call rounded scheduling. Let’s say pipeline scheduled run hourly 02 minute mark (e.g., 01:02, 02:02, etc.), orchestrator runs every hour 00 minute. orchestrator runs, ’ll slightly pipeline scheduled time, ’ll trigger pipeline anyway ’s close enough within frequency orchestrator. instead orchestrator ran every 15 minutes, ’d still execute pipeline hour. underprovisioned orchestrator ran every day, pipeline execute day. important guideline orchestrator needs run least frequency highest frequency pipeline. maestro orchestrator R script Quarto like : passing orch_frequency = \"1 hour\" run_schedule(), ’re saying intend run orchestrator every 1 hour.","code":"library(maestro)  schedule <- build_schedule()  run_schedule(   schedule,   orch_frequency = \"1 hour\" )"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"rounded-scheduling","dir":"Articles","previous_headings":"","what":"Rounded Scheduling","title":"Motivation and Concepts","text":"Importantly, maestro needs know often ’re going run orchestrator. Unlike orchestration tools , maestro isn’t intended continuously running, saves compute resources. means pipelines won’t necessarily run exactly ’re scheduled . concept call rounded scheduling. Let’s say pipeline scheduled run hourly 02 minute mark (e.g., 01:02, 02:02, etc.), orchestrator runs every hour 00 minute. orchestrator runs, ’ll slightly pipeline scheduled time, ’ll trigger pipeline anyway ’s close enough within frequency orchestrator. instead orchestrator ran every 15 minutes, ’d still execute pipeline hour. underprovisioned orchestrator ran every day, pipeline execute day. important guideline orchestrator needs run least frequency highest frequency pipeline. maestro orchestrator R script Quarto like : passing orch_frequency = \"1 hour\" run_schedule(), ’re saying intend run orchestrator every 1 hour.","code":"library(maestro)  schedule <- build_schedule()  run_schedule(   schedule,   orch_frequency = \"1 hour\" )"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"comparison-with-other-packages","dir":"Articles","previous_headings":"","what":"Comparison with other packages","title":"Motivation and Concepts","text":"targets “pipeline tool statistics data science R”. multiple connected components pipeline, targets skips computation tasks --date. targets seems primarily used projects single output (e.g., model, document) multiple steps cumulatively take long time complete. contrast, maestro focused projects multiple independent pipelines. Moreover, maestro pipelines primarily used --dateness source data unknown (e.g., coming API database), unlike targets determines --dateness based contents file. Dagster “open source orchestration platform development, production, observation data assets”. Like maestro, dagster uses decorators (special comments) configure data assets (functions). Unlike maestro, dagster primarily chaining together dependent components multi-step pipeline - DAG. also supports developer UI fully developed maestro current time. DAGs supported maestro defining maestroInputs maestroOutputs tags, maestro still predominately geared toward projects multiple pipelines running simultaneously different schedules.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"r-targets","dir":"Articles","previous_headings":"","what":"{R} targets","title":"Motivation and Concepts","text":"targets “pipeline tool statistics data science R”. multiple connected components pipeline, targets skips computation tasks --date. targets seems primarily used projects single output (e.g., model, document) multiple steps cumulatively take long time complete. contrast, maestro focused projects multiple independent pipelines. Moreover, maestro pipelines primarily used --dateness source data unknown (e.g., coming API database), unlike targets determines --dateness based contents file.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"python-dagster","dir":"Articles","previous_headings":"","what":"{Python} dagster","title":"Motivation and Concepts","text":"Dagster “open source orchestration platform development, production, observation data assets”. Like maestro, dagster uses decorators (special comments) configure data assets (functions). Unlike maestro, dagster primarily chaining together dependent components multi-step pipeline - DAG. also supports developer UI fully developed maestro current time. DAGs supported maestro defining maestroInputs maestroOutputs tags, maestro still predominately geared toward projects multiple pipelines running simultaneously different schedules.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"when-to-not-use-maestro","dir":"Articles","previous_headings":"","what":"When to not use maestro?","title":"Motivation and Concepts","text":"maestro can used almost data engineering task can performed R, cases less appropriate use . maestro support streaming (.e., continuous) event-driven pipelines. batch processes can run maestro. Although hard limit number pipelines can run maestro (ways maximizing efficiency number pipelines increases, using multiple cores), advise using maestro run many pipelines - least single project. several reasons : (1) orchestrator execution time become problem even multiple cores; (2) organizing keeping track many pipelines single R project becomes difficult; (3) number dependencies manage project likely balloon. wish continue using maestro scenario, recommendation split jobs multiple projects running maestro. Nevertheless, hundreds jobs run ’s likely indicator enterprise matured maestro something bit sophisticated. pipelines need run every minute less may want look solution supports near real time real time data processing. orchestrator may trouble keeping ’s scheduled run often. maestro R pipelines . Using reticulate may help Python pinch though.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"streaming-and-event-driven","dir":"Articles","previous_headings":"","what":"Streaming and Event-driven","title":"Motivation and Concepts","text":"maestro support streaming (.e., continuous) event-driven pipelines. batch processes can run maestro.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"hundreds-of-pipelines","dir":"Articles","previous_headings":"","what":"Hundreds of pipelines","title":"Motivation and Concepts","text":"Although hard limit number pipelines can run maestro (ways maximizing efficiency number pipelines increases, using multiple cores), advise using maestro run many pipelines - least single project. several reasons : (1) orchestrator execution time become problem even multiple cores; (2) organizing keeping track many pipelines single R project becomes difficult; (3) number dependencies manage project likely balloon. wish continue using maestro scenario, recommendation split jobs multiple projects running maestro. Nevertheless, hundreds jobs run ’s likely indicator enterprise matured maestro something bit sophisticated.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"high-frequency-jobs","dir":"Articles","previous_headings":"","what":"High frequency jobs","title":"Motivation and Concepts","text":"pipelines need run every minute less may want look solution supports near real time real time data processing. orchestrator may trouble keeping ’s scheduled run often.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"multiple-languages-r-python","dir":"Articles","previous_headings":"","what":"Multiple languages (R + Python)","title":"Motivation and Concepts","text":"maestro R pipelines . Using reticulate may help Python pinch though.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-3-use-cases.html","id":"hourly-pipeline","dir":"Articles","previous_headings":"","what":"Hourly Pipeline","title":"Use Cases","text":"pipeline example standard extract transform load (ETL) workflow. pipeline scheduled run every 3 hours starting 2024-04-25 05:45:00. goal pipeline perform following: access online hosted CSV file perform lite data wrangling write file local storage parquet format example setup simple set tasks creating objects used next series tasks. components pipeline within pipeline_wildfire_hourly function, parameters.","code":"#' pipeline_wildfire_hourly maestro pipeline #' #' @maestroFrequency 3 hour #' @maestroStartTime 2024-04-25 05:45:00 #' @maestroTz America/Halifax   pipeline_wildfire_hourly <- function() {      # load libraries   library(dplyr)   library(readr)   library(sf)   library(sfarrow)    # Access active wildfire data from hosted csv   df <- readr::read_csv(\"https://cwfis.cfs.nrcan.gc.ca/downloads/activefires/activefires.csv\")      # Data wrangling   df_geom <- df |>     dplyr::mutate(insert_datetime = Sys.time()) |>     sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)         # Write active wildfires to file   basename <- paste(\"cdn_wildfire\", as.integer(Sys.time()), sep = \"_\")      df_geom |>     sfarrow::write_sf_dataset(\"~/data/wildfires\",                               format = \"parquet\",                               basename_template = paste0(basename,                                                          \"-{i}.parquet\")) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-3-use-cases.html","id":"daily-pipeline","dir":"Articles","previous_headings":"","what":"Daily Pipeline","title":"Use Cases","text":"pipeline example standard extract transform load (ETL) workflow. pipeline scheduled run every day starting 2024-04-25 06:30:00. goal pipeline perform following: submit request API extract data API add insert datetime column write file local storage parquet format example custom function used access extract data API, piped additional tasks. components pipeline within pipeline_climate_daily function, parameters.","code":"#' pipeline_climate_daily maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-04-25 06:30:00 #' @maestroTz America/Halifax  pipeline_climate_daily <- function() {      # load libraries   library(dplyr)   library(httr2)   library(arrow)      # Custom function for accessing api climate data   get_hourly_climate_info <- function(station_id, request_limit = 24) {      # Validate parameters   stopifnot(\"`station_id` must be a real number\" = is.numeric(station_id) && station_id > 0)   stopifnot(\"`station_id` must be a length-one vector\" = length(station_id) == 1)      # Access climate hourly via geomet api    hourly_req <- httr2::request(\"https://api.weather.gc.ca/collections/climate-hourly/items\") |>      httr2::req_url_query(       lang = \"en-CA\",       offset = 0,       CLIMATE_IDENTIFIER = station_id,       LOCAL_DATE = Sys.Date() - 1,       limit = request_limit     )      # Perform the request   hourly_resp <- hourly_req |>      httr2::req_perform()      # Climate station response to data frame   geomet_json <- hourly_resp |>      httr2::resp_body_json(simplifyVector = TRUE)      geomet_json$features   }      # Write climate hourly to file   basename <- paste(\"climate_hourly\", as.integer(Sys.time()), sep = \"_\")    get_hourly_climate_info(8202251) |>     dplyr::mutate(insert_datetime = Sys.time()) |>     arrow::write_dataset(       \"~/data/climate\",       format = \"parquet\",       basename_template = basename       ) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"stateless-execution","dir":"Articles","previous_headings":"","what":"Stateless Execution","title":"Advanced Scheduling","text":"Maestro takes unique approach scheduling compared orchestration tools. Whereas schedulers involve continuously running program monitor time execute jobs current time right, maestro designed run intermittently. also doesn’t need save cache data executions - words, ’s stateless. design several benefits; namely, can run serverless way saves compute resources. However, achieve takes shortcuts may mean precise timeliness lost. become clearer examples.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"rounded-scheduling","dir":"Articles","previous_headings":"","what":"Rounded Scheduling","title":"Advanced Scheduling","text":"timeliness pipeline measured close scheduled execution time actual execution time. Maestro timely needs relative unit time interested . concept rounded scheduling. run orchestrator daily, timeliness pipelines within nearest day - doesn’t care specified pipeline run exactly 09:21:20 day. run every 10 minutes, timeliness pipelines within nearest 10 minute interval. Let’s look examples: First, ’ll consider one pipeline scheduled run daily 09:20:00 ’ll configure orchestrator run daily. demonstration purposes, ’ll manually set check time 08:00:00 UTC (time maestro use compare scheduled time). practice, almost always want system time using either Sys.time() lubridate::now(). can see pipeline executed even though current time 09:20:00. set orchestrator run daily considers close enough within day. Let’s see happens frequency orchestrator: skipped wasn’t within 15 minute degree difference output tells us next run 2024-06-20 09:15:00. takeaway message timeliness pipeline depends frequently orchestrator runs. Remember declare orch_frequency = \"15 minutes\" essentially contract stating run every 15 minutes - maestro . run orchestrator less frequently said unexpected things happen. Specifically, run frequently stated, pipelines run often expected, likewise less frequently stated means pipelines won’t run often.","code":"# ./pipelines/daily_example.R #' daily_example maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-06-20 09:20:00 daily_example <- function() {    # Pipeline code } # ./orchestrator.R  library(maestro)  schedule <- build_schedule()  status <- run_schedule(   schedule,   orch_frequency = \"1 day\",   check_datetime = as.POSIXct(\"2024-06-20 08:00:00\", tz = \"UTC\") ) ℹ 1 script successfully parsed  ── [2025-02-18 18:08:07] Running pipelines ▶ ✔ daily_example [30ms]  ── [2025-02-18 18:08:07] Pipeline execution completed ■ | 0.059 sec elapsed ✔ 1 success | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 1 total ────────────────────────────────────────────────────────────────────────────────  ── Next scheduled pipelines ❯ Pipe name | Next scheduled run • daily_example | 2024-06-21 # ./orchestrator.R status <- run_schedule(   schedule,   orch_frequency = \"15 minutes\",   check_datetime = as.POSIXct(\"2024-06-20 08:00:00\", tz = \"UTC\") ) ── [2025-02-18 18:08:07] Running pipelines ▶  ── [2025-02-18 18:08:07] Pipeline execution completed ■ | 0.001 sec elapsed ✔ 1 success | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 1 total ────────────────────────────────────────────────────────────────────────────────  ── Next scheduled pipelines ❯ Pipe name | Next scheduled run • daily_example | 2024-06-20 09:15:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"how-often-should-i-schedule-my-orchestrator","dir":"Articles","previous_headings":"","what":"How often should I schedule my orchestrator?","title":"Advanced Scheduling","text":"single pipeline even multiple pipelines run time easy question answer. practice (experience using maestro production) multiple pipelines run different intervals different times. Maybe run hourly, run daily, others run monthly. Let’s say three pipelines following frequencies start times: good starting point schedule often highest frequency pipeline project - 1 hour example. run *:30:00 minute day, pipe1 execute nearly exactly scheduled time pipelines executed 30 minutes early. ’re comfortable margin error ’s big deal, orchestrator frequency 30 minutes ensure pipelines run scheduled exactly. Let’s see another example: three pipelines hourly start different 10-minute intervals. run orchestrator 1 hour ’ll execute time. important execute different times, set 10 minutes. good heuristic run often smallest interval time difference pipeline. pretty good long don’t run often pipelines can’t complete next execution time. don’t recommend running orchestrator frequently every 5 minutes unless ’re confident pipelines fast execute.1 Maestro function determining ideal orchestrator frequency based pipeline frequencies project called suggest_orch_frequency(). looks shortest interval time future pipeline executions suggests frequency.","code":"name frequency          start_time 1 pipe1    1 hour 2024-06-18 12:30:00 2 pipe2    2 days 2024-06-18 06:00:00 3 pipe3  4 months 2024-06-20 00:00:00 name frequency          start_time 1 pipe4    1 hour 2024-06-18 00:00:00 2 pipe5    1 hour 2024-06-18 00:10:00 3 pipe6    1 hour 2024-06-18 00:20:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"example-1","dir":"Articles","previous_headings":"","what":"Example 1","title":"Advanced Scheduling","text":"Let’s say three pipelines following frequencies start times: good starting point schedule often highest frequency pipeline project - 1 hour example. run *:30:00 minute day, pipe1 execute nearly exactly scheduled time pipelines executed 30 minutes early. ’re comfortable margin error ’s big deal, orchestrator frequency 30 minutes ensure pipelines run scheduled exactly. Let’s see another example:","code":"name frequency          start_time 1 pipe1    1 hour 2024-06-18 12:30:00 2 pipe2    2 days 2024-06-18 06:00:00 3 pipe3  4 months 2024-06-20 00:00:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"example-2","dir":"Articles","previous_headings":"","what":"Example 2","title":"Advanced Scheduling","text":"three pipelines hourly start different 10-minute intervals. run orchestrator 1 hour ’ll execute time. important execute different times, set 10 minutes. good heuristic run often smallest interval time difference pipeline. pretty good long don’t run often pipelines can’t complete next execution time. don’t recommend running orchestrator frequently every 5 minutes unless ’re confident pipelines fast execute.1 Maestro function determining ideal orchestrator frequency based pipeline frequencies project called suggest_orch_frequency(). looks shortest interval time future pipeline executions suggests frequency.","code":"name frequency          start_time 1 pipe4    1 hour 2024-06-18 00:00:00 2 pipe5    1 hour 2024-06-18 00:10:00 3 pipe6    1 hour 2024-06-18 00:20:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"irregular-schedules","dir":"Articles","previous_headings":"","what":"Irregular Schedules","title":"Advanced Scheduling","text":"also possible run pipelines irregular schedule specifying hours, days week, days month, months year: pipeline runs hourly minimum, can run specific hours. useful, example, pipelines want run business hours. Use maestroHours tag integers corresponding hours [0-23] separated white space. sure use corresponding maestroFrequency. pipeline runs least daily, can run specific days week days month. days week use strings like Mon, Tue, Wed, etc. using days month use integers [1-31]. specify days week days month. pipeline runs least monthly, can run specific months. Use integers [1-12] specify months. Note can use combinations specifiers depending minimum frequency pipeline. example, hourly pipeline can run specific hours days. wanted pipeline run business hours including weekends. look like :","code":"#' specific_hours maestro pipeline #' #' @maestroFrequency hourly #' @maestroHours 6 9 12 15 18 some_hours_example <- function() {    # Pipeline code } #' specific_days_of_week maestro pipeline #' #' @maestroFrequency daily #' @maestroDays Mon Tue Wed Thu Fri some_dow_example <- function() {    # Pipeline code }  #' specific_days_of_week maestro pipeline #' #' @maestroFrequency daily #' @maestroDays 1 14 28 some_dom_example <- function() {    # Pipeline code } #' specific_months maestro pipeline #' #' @maestroFrequency months #' @maestroMonths 1 7 10 some_months <- function() {    # Pipeline code } #' business_hours maestro pipeline #' #' @maestroFrequency hourly #' @maestroHours 9 10 11 12 13 14 15 16 17 #' @maestroDays Mon Tue Wed Thu Fri during_work_hours_example <- function() {    # Pipeline code }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"hours-of-the-day","dir":"Articles","previous_headings":"","what":"Hours of the day","title":"Advanced Scheduling","text":"pipeline runs hourly minimum, can run specific hours. useful, example, pipelines want run business hours. Use maestroHours tag integers corresponding hours [0-23] separated white space. sure use corresponding maestroFrequency.","code":"#' specific_hours maestro pipeline #' #' @maestroFrequency hourly #' @maestroHours 6 9 12 15 18 some_hours_example <- function() {    # Pipeline code }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"days-of-weekdays-of-month","dir":"Articles","previous_headings":"","what":"Days of week/days of month","title":"Advanced Scheduling","text":"pipeline runs least daily, can run specific days week days month. days week use strings like Mon, Tue, Wed, etc. using days month use integers [1-31]. specify days week days month.","code":"#' specific_days_of_week maestro pipeline #' #' @maestroFrequency daily #' @maestroDays Mon Tue Wed Thu Fri some_dow_example <- function() {    # Pipeline code }  #' specific_days_of_week maestro pipeline #' #' @maestroFrequency daily #' @maestroDays 1 14 28 some_dom_example <- function() {    # Pipeline code }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"months-of-year","dir":"Articles","previous_headings":"","what":"Months of year","title":"Advanced Scheduling","text":"pipeline runs least monthly, can run specific months. Use integers [1-12] specify months. Note can use combinations specifiers depending minimum frequency pipeline. example, hourly pipeline can run specific hours days. wanted pipeline run business hours including weekends. look like :","code":"#' specific_months maestro pipeline #' #' @maestroFrequency months #' @maestroMonths 1 7 10 some_months <- function() {    # Pipeline code } #' business_hours maestro pipeline #' #' @maestroFrequency hourly #' @maestroHours 9 10 11 12 13 14 15 16 17 #' @maestroDays Mon Tue Wed Thu Fri during_work_hours_example <- function() {    # Pipeline code }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Advanced Scheduling","text":"comes time deploy project make sure whatever use actually run project (e.g., cron, TaskScheduler, Google Cloud Scheduler, etc.) indeed running frequency orchestrator. ’s best stick using whole units time rather fractional units - orchestrator runs every 15 minutes like run 00:00, 15:00, 30:00, 45:00 minutes. makes reasoning scheduling simpler.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-5-directed-acyclic-graphs.html","id":"etl-example","dir":"Articles","previous_headings":"","what":"ETL Example","title":"Directed Acyclic Graphs (DAGs)","text":"great case using DAGs ETL/ELT pipelines. component extract, transform, load single element DAG. Consider example home page: ’s pretty concise, probably wouldn’t bother breaking apart practice, let’s illustrative purposes (also get rid messaging). developing pipelines, helpful visualize dependency structure. can calling show_network() schedule:","code":"#' Example ETL pipeline #' @maestroFrequency 1 day #' @maestroStartTime 2024-03-25 12:30:00 my_etl <- function() {      # Pretend we're getting data from a source   message(\"Get data\")   extracted <- mtcars      # Transform   message(\"Transforming\")   transformed <- extracted |>      dplyr::mutate(hp_deviation = hp - mean(hp))      # Load - write to a location   message(\"Writing\")   write.csv(transformed, file = paste0(\"transformed_mtcars_\", Sys.Date(), \".csv\")) } [1] TRUE #' @maestroFrequency 1 day #' @maestroStartTime 2024-03-25 12:30:00 #' @maestroOutputs transform extract <- function() {   # Imagine this is something way more complicated, like a database call   mtcars }  #' @maestroOutputs load transform <- function(.input) {   .input |>      dplyr::mutate(hp_deviation = hp - mean(hp)) }  #' @maestro load <- function(.input) {   write.csv(.input, file = paste0(\"transformed_mtcars.csv\")) } library(maestro)  schedule <- build_schedule(quiet = TRUE)  status <- run_schedule(   schedule,   run_all = TRUE ) ── [2025-02-18 18:08:01]                                                         Running pipelines ▶                                                              ✔ extract [9ms]                                                                  ✔ |-transform [13ms]                                                             ✔   |-load [9ms]                                                                                                                                                  ── [2025-02-18 18:08:01]                                                         Pipeline execution completed ■ | 0.058 sec elapsed                               ✔ 3 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total              ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://whipson.github.io/maestro/articles/maestro-6-logging.html","id":"conditions-in-r-message-warning-error","dir":"Articles","previous_headings":"","what":"Conditions in R: Message, Warning, Error","title":"Logging","text":"R three types conditions (increasing severity): message, warning, error. Maestro makes use system reporting statuses pipelines managing logs. reason, recommend using message() adding informational logs pipelines contrast print() cat(). also several logging packages R including logger logr. ’ll see later, can integrated maestro well special modifications.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-6-logging.html","id":"log-to-file","dir":"Articles","previous_headings":"","what":"Log to File","title":"Logging","text":"Maestro allows log file continuously appended pipeline logs. Conventionally, give name maestro.log, can text file. create sample set 3 pipelines, one message, one warning, another error. Now run orchestrator. demo purposes, ’ll set run_all = TRUE allow pipelines run regardless scheduling. set log_to_file = TRUE argument tell log file. creates (later appends ) generic ‘maestro.log’ file project directory. can see typical output maestro schedule pipeline runs. Now let’s take look log file. can see logs formatted name pipeline message came, type log (INFO, WARN, ERROR), timestamp, message .","code":"#' pipelines/logs.R #' @maestroFrequency hourly hello <- function() {   message('hello') }  #' @maestroFrequency hourly uhh <- function() {   warning('this could be a problem') }  #' @maestroFrequency hourly oh_no <- function() {   stop('this is bad') } # orchestrator.R library(maestro)  schedule <- build_schedule(quiet = TRUE)  status <- run_schedule(   schedule,    run_all = TRUE,   log_to_file = TRUE ) ── [2025-02-18 18:08:10] Running pipelines ▶ ✔ hello [14ms] ✔ uhh [32ms] ✖ oh_no [79ms]  ── [2025-02-18 18:08:10] Pipeline execution completed ■ | 0.168 sec elapsed ✔ 2 successes | → 0 skipped | ! 1 warning | ✖ 1 error | ◼ 3 total ✖ Use `last_run_errors()` to show pipeline errors. ! Use `last_run_warnings()` to show pipeline warnings. ──────────────────────────────────────────────────────────────────────────────── readLines(\"maestro.log\") [1] \"[hello] [INFO] [2025-02-18 18:08:10.348811]: hello\" [2] \"[uhh] [WARN] [2025-02-18 18:08:10.389989]: this could be a problem\" [3] \"[oh_no] [ERROR] [2025-02-18 18:08:10.419607]: this is bad\""},{"path":"https://whipson.github.io/maestro/articles/maestro-6-logging.html","id":"log-to-console","dir":"Articles","previous_headings":"","what":"Log to Console","title":"Logging","text":"can also logs printed directly console using log_to_console argument. Now logs interwoven output maestro. logging options operate independently, possible log file console.","code":"# orchestrator.R schedule <- build_schedule(quiet = TRUE)  status <- run_schedule(   schedule,    run_all = TRUE,   log_to_console = TRUE ) ── [2025-02-18 18:08:10] Running pipelines ▶ [hello] [INFO] [2025-02-18 18:08:10.676646]: hello ✔ hello [10ms] [uhh] [WARN] [2025-02-18 18:08:10.693568]: this could be a problem ✔ uhh [12ms] [oh_no] [ERROR] [2025-02-18 18:08:10.712834]: this is bad ✖ oh_no [14ms]  ── [2025-02-18 18:08:10] Pipeline execution completed ■ | 0.057 sec elapsed ✔ 2 successes | → 0 skipped | ! 1 warning | ✖ 1 error | ◼ 3 total ✖ Use `last_run_errors()` to show pipeline errors. ! Use `last_run_warnings()` to show pipeline warnings. ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://whipson.github.io/maestro/articles/maestro-6-logging.html","id":"log-levels","dir":"Articles","previous_headings":"","what":"Log Levels","title":"Logging","text":"Maestro uses concept log levels (also known thresholds) allow users suppress logs meet severity threshold. , example, concerned error messages wanted ignore warnings info messages, use maestroLogLevel tag relevant pipelines. Now, error messages displayed logged. default, pipelines use log level INFO, means messages, warnings, errors logged.","code":"#' pipelines/logs.R #' @maestroFrequency hourly #' @maestroLogLevel ERROR hello <- function() {   message('hello') }  #' @maestroFrequency hourly #' @maestroLogLevel ERROR uhh <- function() {   warning('this could be a problem') }  #' @maestroFrequency hourly #' @maestroLogLevel ERROR oh_no <- function() {   stop('this is bad') } # orchestrator.R schedule <- build_schedule(quiet = TRUE)  status <- run_schedule(   schedule,    run_all = TRUE,   log_to_console = TRUE ) ── [2025-02-18 18:08:10] Running pipelines ▶ ✔ hello [9ms] ✔ uhh [9ms] [oh_no] [ERROR] [2025-02-18 18:08:10.899585]: this is bad ✖ oh_no [11ms]  ── [2025-02-18 18:08:10] Pipeline execution completed ■ | 0.055 sec elapsed ✔ 2 successes | → 0 skipped | ! 1 warning | ✖ 1 error | ◼ 3 total ✖ Use `last_run_errors()` to show pipeline errors. ! Use `last_run_warnings()` to show pipeline warnings. ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://whipson.github.io/maestro/articles/maestro-6-logging.html","id":"other-loggers","dir":"Articles","previous_headings":"","what":"Other Loggers","title":"Logging","text":"wish use logging libraries, recommend using logger. can put statements anywhere pipelines ’ll propagate logs maestro uses. Best approach use namespace argument reference name pipeline. Note logger just creates messages actually trigger conditions. impacts statuses pipelines appear. important use match namespace name pipeline (.e., function name) logs appear log file.","code":"#' pipelines/logs.R #' @maestroFrequency hourly hello <- function() {   logger::log_info(\"hi\", namespace = \"hello\") }  #' @maestroFrequency hourly uhh <- function() {   logger::log_warn(\"this could be a problem\", namespace = \"uhh\") }  #' @maestroFrequency hourly oh_no <- function() {   logger::log_error(\"this is bad\", namespace = \"oh_no\") } # orchestrator.R schedule <- build_schedule(quiet = TRUE)  status <- run_schedule(   schedule,    run_all = TRUE,   log_to_console = TRUE ) ── [2025-02-18 18:08:11] Running pipelines ▶ [hello] [INFO] [2025-02-18 18:08:11.04295]: hi ✔ hello [10ms] [uhh] [WARN] [2025-02-18 18:08:11.059778]: this could be a problem ✔ uhh [13ms] [oh_no] [ERROR] [2025-02-18 18:08:11.080495]: this is bad ✔ oh_no [14ms]  ── [2025-02-18 18:08:11] Pipeline execution completed ■ | 0.06 sec elapsed ✔ 3 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://whipson.github.io/maestro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hipson. Maintainer, author, copyright holder. Ryan Garnett. Author, contributor, copyright holder.","code":""},{"path":"https://whipson.github.io/maestro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hipson W, Garnett R (2025). maestro: Orchestration Data Pipelines. R package version 0.5.1, https://whipson.github.io/maestro/, https://github.com/whipson/maestro.","code":"@Manual{,   title = {maestro: Orchestration of Data Pipelines},   author = {Will Hipson and Ryan Garnett},   year = {2025},   note = {R package version 0.5.1, https://whipson.github.io/maestro/},   url = {https://github.com/whipson/maestro}, }"},{"path":"https://whipson.github.io/maestro/index.html","id":"maestro-","dir":"","previous_headings":"","what":"Orchestration of Data Pipelines","title":"Orchestration of Data Pipelines","text":"maestro lightweight framework creating orchestrating data pipelines R. core, maestro R script scheduler unique two ways: Stateless: need continuously running - can run serverless architecture Use rounded scheduling: timeliness pipeline executions depends often run orchestrator maestro create pipelines (functions) schedule using roxygen2 tags - special comments (decorators) function. create orchestrator containing maestro functions scheduling invoking pipelines.","code":""},{"path":"https://whipson.github.io/maestro/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Orchestration of Data Pipelines","text":"maestro available CRAN can installed via: , try development version via:","code":"install.packages(\"maestro\") devtools::install_github(\"https://github.com/whipson/maestro\")"},{"path":"https://whipson.github.io/maestro/index.html","id":"project-setup","dir":"","previous_headings":"","what":"Project Setup","title":"Orchestration of Data Pipelines","text":"maestro project needs least two components: collection R pipelines (functions) want schedule single orchestrator script kicks scripts ’re scheduled run project file structure look like : Use maestro::create_maestro() easily create project structure blank R project. Let’s look detail.","code":"sample_project ├── orchestrator.R └── pipelines     ├── my_etl.R     ├── pipe1.R     └── pipe2.R"},{"path":"https://whipson.github.io/maestro/index.html","id":"pipelines","dir":"","previous_headings":"Project Setup","what":"Pipelines","title":"Orchestration of Data Pipelines","text":"pipeline task want run. task may involve retrieving data source, performing cleaning computation data, sending destination. maestro concerned pipeline , rather want run . ’s simple pipeline maestro: makes maestro pipeline use special roxygen-style comments function definition: #' @maestroFrequency 1 day indicates function execute daily frequency. #' @maestroStartTime 2024-03-25 12:30:00 denotes first time run. words, ’d expect run every day 12:30 starting 25th March 2024. maestro tags ones follow camelCase convention established roxygen2.","code":"#' Example ETL pipeline #' @maestroFrequency 1 day #' @maestroStartTime 2024-03-25 12:30:00 my_etl <- function() {      # Pretend we're getting data from a source   message(\"Get data\")   extracted <- mtcars      # Transform   message(\"Transforming\")   transformed <- extracted |>      dplyr::mutate(hp_deviation = hp - mean(hp))      # Load - write to a location   message(\"Writing\")   # write.csv(transformed, file = paste0(\"transformed_mtcars_\", Sys.Date(), \".csv\")) }"},{"path":"https://whipson.github.io/maestro/index.html","id":"orchestrator","dir":"","previous_headings":"Project Setup","what":"Orchestrator","title":"Orchestration of Data Pipelines","text":"orchestrator script checks schedules pipelines maestro project executes . orchestrator also handles global execution tasks collecting logs managing shared resources like global objects custom functions. option using Quarto, RMarkdown, straight-R script orchestrator, former two advantages respect deployment Posit Connect. simple orchestrator looks like :  function build_schedule() scours pipelines project builds schedule. run_schedule() checks pipeline’s scheduled time system time within margin rounding calls pipelines run.","code":"library(maestro)  # Look through the pipelines directory for maestro pipelines to create a schedule schedule <- build_schedule(pipeline_dir = \"pipelines\")  # Checks which pipelines are due to run and then executes them output <- run_schedule(   schedule,    orch_frequency = \"1 day\" )"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Class individual maestro pipeline pipeline defined single R script schedule input Class individual maestro pipeline pipeline defined single R script schedule input","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"MaestroPipeline$new() MaestroPipeline$print() MaestroPipeline$run() MaestroPipeline$get_pipe_name() MaestroPipeline$get_schedule() MaestroPipeline$check_timeliness() MaestroPipeline$get_status() MaestroPipeline$get_status_chr() MaestroPipeline$get_outputs() MaestroPipeline$get_inputs() MaestroPipeline$get_artifacts() MaestroPipeline$get_errors() MaestroPipeline$get_warnings() MaestroPipeline$get_messages() MaestroPipeline$update_inputs() MaestroPipeline$update_outputs() MaestroPipeline$clone()","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Create new Pipeline object","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$new(   script_path,   pipe_name,   frequency = NA_character_,   start_time = lubridate::NA_POSIXct_,   tz = NA_character_,   hours = NULL,   days = NULL,   months = NULL,   skip = FALSE,   log_level = \"INFO\",   inputs = NULL,   outputs = NULL )"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"script_path path script pipe_name name pipeline frequency frequency pipeline (e.g., 1 day) start_time start time pipeline tz time zone pipeline hours specific hours day days specific days week month months specific months year skip whether skip pipeline regardless scheduling log_level log level pipeline inputs names pipelines pipeline dependent input outputs names pipelines pipeline dependency","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"MaestroPipeline object","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Prints pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$print()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"print","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Runs pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$run(   resources = list(),   log_file = tempfile(),   quiet = FALSE,   log_file_max_bytes = 1e+06,   .input = NULL,   cli_prepend = \"\",   log_to_console = FALSE,   ... )"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"resources named list arguments values pass pipeline log_file path log file logging quiet whether silence console output log_file_max_bytes maximum bytes log file trimming .input input values upstream pipelines cli_prepend text prepend cli output log_to_console whether output statements console (FALSE suppress append log) ... additional arguments (unused)","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-pipe-name-","dir":"Reference","previous_headings":"","what":"Method get_pipe_name()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get pipeline name","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_pipe_name()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"pipeline_name","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-schedule-","dir":"Reference","previous_headings":"","what":"Method get_schedule()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get schedule data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_schedule()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-check-timeliness-","dir":"Reference","previous_headings":"","what":"Method check_timeliness()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Check whether pipeline scheduled run based orchestrator frequency current time","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$check_timeliness(   orch_unit,   orch_n,   check_datetime = lubridate::now(),   ... )"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"orch_unit unit orchestrator (e.g., day) orch_n number units frequency check_datetime datetime check timeliness pipeline (almost always now) ... unused","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"MaestroPipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-status-","dir":"Reference","previous_headings":"","what":"Method get_status()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get status pipeline data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_status()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-status-chr-","dir":"Reference","previous_headings":"","what":"Method get_status_chr()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get status pipeline string","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_status_chr()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"character","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-outputs-","dir":"Reference","previous_headings":"","what":"Method get_outputs()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Names pipelines receive input pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_outputs()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"character","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-inputs-","dir":"Reference","previous_headings":"","what":"Method get_inputs()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Names pipelines input pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_inputs()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"character","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-artifacts-","dir":"Reference","previous_headings":"","what":"Method get_artifacts()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get artifacts (return values) pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_artifacts()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-errors-","dir":"Reference","previous_headings":"","what":"Method get_errors()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get list errors pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_errors()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-warnings-","dir":"Reference","previous_headings":"","what":"Method get_warnings()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get list warnings pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_warnings()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-get-messages-","dir":"Reference","previous_headings":"","what":"Method get_messages()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Get list messages pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$get_messages()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-update-inputs-","dir":"Reference","previous_headings":"","what":"Method update_inputs()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Update inputs pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$update_inputs(inputs)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"inputs character vector inputting pipeline names","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-update-outputs-","dir":"Reference","previous_headings":"","what":"Method update_outputs()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"Update outputs pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$update_outputs(outputs)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"outputs character vector outputting pipeline names","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"objects class cloneable method.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"","code":"MaestroPipeline$clone(deep = FALSE)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipeline.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for an individual maestro pipeline A pipeline is defined as a single R script with a schedule or input — MaestroPipeline","text":"deep Whether make deep clone.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Class list MaestroPipelines MaestroPipelineList created multiple maestro pipelines single script Class list MaestroPipelines MaestroPipelineList created multiple maestro pipelines single script","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelines list pipelines n_pipelines number pipelines list","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelineList$new() MaestroPipelineList$print() MaestroPipelineList$add_pipelines() MaestroPipelineList$get_pipe_names() MaestroPipelineList$get_pipe_by_name() MaestroPipelineList$get_schedule() MaestroPipelineList$get_timely_pipelines() MaestroPipelineList$get_primary_pipes() MaestroPipelineList$check_timeliness() MaestroPipelineList$get_status() MaestroPipelineList$get_errors() MaestroPipelineList$get_warnings() MaestroPipelineList$get_messages() MaestroPipelineList$get_artifacts() MaestroPipelineList$get_network() MaestroPipelineList$validate_network() MaestroPipelineList$run() MaestroPipelineList$clone()","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Create MaestroPipelineList object","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$new(MaestroPipelines = list(), network = NULL)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelines list MaestroPipelines network initialize network","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelineList","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Print MaestroPipelineList","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$print()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"print","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-add-pipelines-","dir":"Reference","previous_headings":"","what":"Method add_pipelines()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Add pipelines list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$add_pipelines(MaestroPipelines = NULL)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelines list MaestroPipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-pipe-names-","dir":"Reference","previous_headings":"","what":"Method get_pipe_names()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get names pipelines list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_pipe_names()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"character","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-pipe-by-name-","dir":"Reference","previous_headings":"","what":"Method get_pipe_by_name()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get MaestroPipeline name","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_pipe_by_name(pipe_name)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"pipe_name name pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-schedule-","dir":"Reference","previous_headings":"","what":"Method get_schedule()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get schedule data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_schedule()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-timely-pipelines-","dir":"Reference","previous_headings":"","what":"Method get_timely_pipelines()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get new MaestroPipelineList containing pipelines scheduled run","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_timely_pipelines(...)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"... arguments passed self$check_timeliness","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"MaestroPipelineList","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-primary-pipes-","dir":"Reference","previous_headings":"","what":"Method get_primary_pipes()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get pipelines primary (.e., inputting pipeline)","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_primary_pipes()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"list MaestroPipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-check-timeliness-","dir":"Reference","previous_headings":"","what":"Method check_timeliness()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Check whether pipelines list scheduled run based orchestrator frequency current time","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$check_timeliness(...)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"... arguments passed self$check_timeliness","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"logical","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-status-","dir":"Reference","previous_headings":"","what":"Method get_status()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get status pipelines data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_status()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-errors-","dir":"Reference","previous_headings":"","what":"Method get_errors()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get list errors pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_errors()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-warnings-","dir":"Reference","previous_headings":"","what":"Method get_warnings()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get list warnings pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_warnings()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-messages-","dir":"Reference","previous_headings":"","what":"Method get_messages()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get list messages pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_messages()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-artifacts-","dir":"Reference","previous_headings":"","what":"Method get_artifacts()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get artifacts (return values) pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_artifacts()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-get-network-","dir":"Reference","previous_headings":"","what":"Method get_network()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Get network structure edge list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$get_network()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-validate-network-","dir":"Reference","previous_headings":"","what":"Method validate_network()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Validates whether inputs outputs exist network valid DAG","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$validate_network()"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"warning invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"Runs pipelines list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$run(..., cores = 1L)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"... arguments passed MaestroPipeline$run cores using multicore number cores run (uses furrr)","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"objects class cloneable method.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"","code":"MaestroPipelineList$clone(deep = FALSE)"},{"path":"https://whipson.github.io/maestro/reference/MaestroPipelineList.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a list of MaestroPipelines A MaestroPipelineList is created when there are multiple maestro pipelines in a single script — MaestroPipelineList","text":"deep Whether make deep clone.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for a schedule of pipelines — MaestroSchedule","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Class schedule pipelines Class schedule pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Class for a schedule of pipelines — MaestroSchedule","text":"PipelineList object type MaestroPipelineList","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class for a schedule of pipelines — MaestroSchedule","text":"MaestroSchedule$new() MaestroSchedule$print() MaestroSchedule$run() MaestroSchedule$get_schedule() MaestroSchedule$get_status() MaestroSchedule$get_artifacts() MaestroSchedule$get_network() MaestroSchedule$show_network() MaestroSchedule$clone()","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Create MaestroSchedule object","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$new(Pipelines = NULL)"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Pipelines list MaestroPipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"MaestroSchedule","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Print schedule object","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$print()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"print","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Run MaestroSchedule","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$run(..., quiet = FALSE, run_all = FALSE, n_show_next = 5)"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a schedule of pipelines — MaestroSchedule","text":"... arguments passed MaestroPipelineList$run quiet whether silence console messages run_all run pipelines regardless schedule (default FALSE) - useful testing. n_show_next show next n scheduled pipes","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-get-schedule-","dir":"Reference","previous_headings":"","what":"Method get_schedule()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Get schedule data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$get_schedule()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-get-status-","dir":"Reference","previous_headings":"","what":"Method get_status()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Get status pipelines data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$get_status()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-get-artifacts-","dir":"Reference","previous_headings":"","what":"Method get_artifacts()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Get artifacts (return values) pipelines","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$get_artifacts()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-get-network-","dir":"Reference","previous_headings":"","what":"Method get_network()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Get network structure pipelines edge list (empty DAG pipelines)","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$get_network()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-show-network-","dir":"Reference","previous_headings":"","what":"Method show_network()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"Visualize DAG relationships pipelines schedule","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$show_network()"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Class for a schedule of pipelines — MaestroSchedule","text":"interactive visualization","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class for a schedule of pipelines — MaestroSchedule","text":"objects class cloneable method.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"MaestroSchedule$clone(deep = FALSE)"},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for a schedule of pipelines — MaestroSchedule","text":"deep Whether make deep clone.","code":""},{"path":"https://whipson.github.io/maestro/reference/MaestroSchedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for a schedule of pipelines — MaestroSchedule","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir) }"},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a schedule table — build_schedule","title":"Build a schedule table — build_schedule","text":"Builds schedule data.frame scheduling pipelines run_schedule().","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a schedule table — build_schedule","text":"","code":"build_schedule(pipeline_dir = \"./pipelines\", quiet = FALSE)"},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a schedule table — build_schedule","text":"pipeline_dir path directory containing pipeline scripts quiet silence metrics console (default = FALSE)","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a schedule table — build_schedule","text":"MaestroSchedule","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a schedule table — build_schedule","text":"function parses maestro tags functions located pipeline_dir conventionally called 'pipelines'. orchestrator requires schedule table determine pipelines run . row schedule table pipeline name scheduling parameters frequency. schedule table mostly intended used run_schedule() immediately. words, recommended make changes .","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a schedule table — build_schedule","text":"","code":"# Creating a temporary directory for demo purposes! In practice, just # create a 'pipelines' directory at the project level.  if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   build_schedule(pipeline_dir = pipeline_dir) }"},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and validate tags then create and populate MaestroPipelineList — build_schedule_entry","title":"Parse and validate tags then create and populate MaestroPipelineList — build_schedule_entry","text":"Parse validate tags create populate MaestroPipelineList","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and validate tags then create and populate MaestroPipelineList — build_schedule_entry","text":"","code":"build_schedule_entry(script_path)"},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and validate tags then create and populate MaestroPipelineList — build_schedule_entry","text":"script_path path script","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and validate tags then create and populate MaestroPipelineList — build_schedule_entry","text":"MaestroPipelineList R6 class","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a duration string to number of seconds — convert_to_seconds","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"Convert duration string number seconds","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"","code":"convert_to_seconds(time_string)"},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"time_string string like 1 day, 1 week, 12 hours, etc.","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"number seconds","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a new maestro project — create_maestro","title":"Creates a new maestro project — create_maestro","text":"Creates new maestro project","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a new maestro project — create_maestro","text":"","code":"create_maestro(path, type = \"R\", overwrite = FALSE, quiet = FALSE, ...)"},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a new maestro project — create_maestro","text":"path file path orchestrator script type file type orchestrator (supports R, Quarto, RMarkdown) overwrite whether overwrite existing orchestrator maestro project quiet whether silence messages console (default = FALSE) ... unused","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a new maestro project — create_maestro","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a new maestro project — create_maestro","text":"","code":"# Creates a new maestro project with an R orchestrator if (interactive()) {   new_proj_dir <- tempdir()   create_maestro(new_proj_dir, type = \"R\", overwrite = TRUE)    create_maestro(new_proj_dir, type = \"Quarto\", overwrite = TRUE) }"},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new orchestrator — create_orchestrator","title":"Create a new orchestrator — create_orchestrator","text":"Create new orchestrator","code":""},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new orchestrator — create_orchestrator","text":"","code":"create_orchestrator(   path,   type = c(\"R\", \"Quarto\", \"RMarkdown\"),   open = interactive(),   quiet = FALSE,   overwrite = FALSE )"},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new orchestrator — create_orchestrator","text":"path file path orchestrator script type file type orchestrator (supports R, Quarto, RMarkdown) open whether open script upon creation quiet whether silence messages console (default = FALSE) overwrite whether overwrite existing orchestrator maestro project","code":""},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new orchestrator — create_orchestrator","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new pipeline in a pipelines directory — create_pipeline","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"Allows creation new pipelines (R scripts) fills maestro tags specified.","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"","code":"create_pipeline(   pipe_name,   pipeline_dir = \"pipelines\",   frequency = \"1 day\",   start_time = Sys.Date(),   tz = \"UTC\",   log_level = \"INFO\",   quiet = FALSE,   open = interactive(),   overwrite = FALSE,   skip = FALSE,   inputs = NULL,   outputs = NULL )"},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"pipe_name name pipeline function pipeline_dir directory containing pipeline scripts frequency often pipeline run (e.g., 1 day, daily, 3 hours, 4 months). Fills maestroFrequency tag start_time start time pipeline schedule. Fills maestroStartTime tag tz timezone pipeline scheduled . Fills maestroTz tag log_level log level pipeline (e.g., INFO, WARN, ERROR). Fills maestroLogLevel tag quiet whether silence messages console (default = FALSE) open whether open script upon creation overwrite whether overwrite existing pipeline name location. skip whether skip pipeline running orchestrator (default = FALSE) inputs vector names pipelines input pipeline (default = NULL inputs) outputs vector names pipelines receive output pipeline (default = NULL outputs)","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(     \"extract_data\",     pipeline_dir = pipeline_dir,     frequency = \"1 hour\",     open = FALSE,     quiet = TRUE,     overwrite = TRUE   )    create_pipeline(     \"new_job\",     pipeline_dir = pipeline_dir,     frequency = \"20 minutes\",     start_time = as.POSIXct(\"2024-06-21 12:20:00\"),     log_level = \"ERROR\",     open = FALSE,     quiet = TRUE,     overwrite = TRUE   ) }"},{"path":"https://whipson.github.io/maestro/reference/get_artifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","title":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","text":"Artifacts return values pipelines. accessible named list names correspond names pipeline.","code":""},{"path":"https://whipson.github.io/maestro/reference/get_artifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","text":"","code":"get_artifacts(schedule)"},{"path":"https://whipson.github.io/maestro/reference/get_artifacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","text":"schedule object type MaestroSchedule created using build_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/get_artifacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","text":"named list","code":""},{"path":"https://whipson.github.io/maestro/reference/get_artifacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the artifacts (return values) of the pipelines in a MaestroSchedule object. — get_artifacts","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    schedule <- run_schedule(     schedule,     orch_frequency = \"1 day\",     quiet = TRUE   )    get_artifacts(schedule)    # Alternatively, use the underlying R6 method   schedule$get_artifacts() }"},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"Generate sequence run times pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"","code":"get_pipeline_run_sequence(   pipeline_n,   pipeline_unit,   pipeline_datetime,   check_datetime,   pipeline_hours = 0:23,   pipeline_days_of_week = 1:7,   pipeline_days_of_month = 1:31,   pipeline_months = 1:12 )"},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"pipeline_n number units pipeline frequency pipeline_unit unit pipeline frequency pipeline_datetime datetime first time pipeline run check_datetime datetime check running pipelines (default current system time UTC) pipeline_hours vector integers [0-23] corresponding hours day pipeline run pipeline_days_of_week vector integers [1-7] corresponding days week pipeline run (1 = Sunday) pipeline_days_of_month vector integers [1-31] corresponding days month pipeline run pipeline_months vector integers [1-12] corresponding months year pipeline run","code":""},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"vector timestamps dates","code":""},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the schedule from a MaestroSchedule object — get_schedule","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"schedule represented table row pipeline columns contain scheduling parameters frequency start time.","code":""},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"","code":"get_schedule(schedule)"},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"schedule object type MaestroSchedule created using build_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"schedule table used internally MaestroSchedule object can accessed using function accessing R6 method MaestroSchedule object.","code":""},{"path":"https://whipson.github.io/maestro/reference/get_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the schedule from a MaestroSchedule object — get_schedule","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    get_schedule(schedule)    # Alternatively, use the underlying R6 method   schedule$get_schedule() }"},{"path":"https://whipson.github.io/maestro/reference/get_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","title":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","text":"status data.frame contains names locations pipelines well information around whether invoked, status (error, warning, etc.), run time.","code":""},{"path":"https://whipson.github.io/maestro/reference/get_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","text":"","code":"get_status(schedule)"},{"path":"https://whipson.github.io/maestro/reference/get_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","text":"schedule object type MaestroSchedule created using build_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/get_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/get_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the statuses of the pipelines in a MaestroSchedule object — get_status","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    schedule <- run_schedule(     schedule,     orch_frequency = \"1 day\",     quiet = TRUE   )    get_status(schedule)    # Alternatively, use the underlying R6 method   schedule$get_status() }"},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually run a pipeline regardless of schedule — invoke","title":"Manually run a pipeline regardless of schedule — invoke","text":"Instantly run single pipeline schedule. useful testing purposes want just run something one-.","code":""},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually run a pipeline regardless of schedule — invoke","text":"","code":"invoke(schedule, pipe_name, resources = list(), ...)"},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually run a pipeline regardless of schedule — invoke","text":"schedule object type MaestroSchedule created using build_schedule() pipe_name name single pipe name schedule resources named list shared resources made available pipelines needed ... arguments passed run_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually run a pipeline regardless of schedule — invoke","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manually run a pipeline regardless of schedule — invoke","text":"Scheduling parameters frequency, start time, specifiers ignored. pipeline run even maestroSkip present.","code":""},{"path":"https://whipson.github.io/maestro/reference/invoke.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually run a pipeline regardless of schedule — invoke","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    invoke(schedule, \"my_new_pipeline\") }"},{"path":"https://whipson.github.io/maestro/reference/is_valid_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a DAG is valid (no loops) — is_valid_dag","title":"Checks whether a DAG is valid (no loops) — is_valid_dag","text":"Checks whether DAG valid (loops)","code":""},{"path":"https://whipson.github.io/maestro/reference/is_valid_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a DAG is valid (no loops) — is_valid_dag","text":"","code":"is_valid_dag(edges)"},{"path":"https://whipson.github.io/maestro/reference/is_valid_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a DAG is valid (no loops) — is_valid_dag","text":"edges data.frame edges (, )","code":""},{"path":"https://whipson.github.io/maestro/reference/is_valid_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a DAG is valid (no loops) — is_valid_dag","text":"boolean","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro build errors — last_build_errors","title":"Retrieve latest maestro build errors — last_build_errors","text":"Gets latest schedule build errors following use build_schedule(). build succeeded build_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro build errors — last_build_errors","text":"","code":"last_build_errors()"},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro build errors — last_build_errors","text":"error messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro build errors — last_build_errors","text":"","code":"last_build_errors() #> NULL"},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline errors — last_run_errors","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"Gets latest pipeline errors following use run_schedule(). runs succeeded run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"","code":"last_run_errors()"},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"error messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"","code":"last_run_errors() #> NULL"},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline messages — last_run_messages","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"Gets latest pipeline messages following use run_schedule(). messages run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"","code":"last_run_messages()"},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"Note setting maestroLogLevel something greater INFO ignore messages.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"","code":"last_run_messages() #> NULL"},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline warnings — last_run_warnings","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"Gets latest pipeline warnings following use run_schedule(). warnings run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"","code":"last_run_warnings()"},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"warning messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"Note setting maestroLogLevel something greater WARN ignore warnings.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"","code":"last_run_warnings() #> NULL"},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":null,"dir":"Reference","previous_headings":"","what":"maestro package — maestro","title":"maestro package — maestro","text":"Lightweight pipeline orchestration R","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"maestro package — maestro","text":"Documentation: GitHub","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"maestro package — maestro","text":"Maintainer: Hipson .e.hipson@gmail.com (ORCID) [copyright holder] Authors: Ryan Garnett ryangarnett78@gmail.com [contributor, copyright holder]","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"cli output for generate schedule table — maestro_parse_cli","title":"cli output for generate schedule table — maestro_parse_cli","text":"cli output generate schedule table","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cli output for generate schedule table — maestro_parse_cli","text":"","code":"maestro_parse_cli(parse_succeeds, parse_errors)"},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cli output for generate schedule table — maestro_parse_cli","text":"parse_succeeds list parse results (.e., succeeded) parse_errors list parse errors","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cli output for generate schedule table — maestro_parse_cli","text":"cli output","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Maestro Tags — maestro_tags","title":"Maestro Tags — maestro_tags","text":"maestro tags roxygen2 comments configuring scheduling execution pipelines.","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maestro Tags — maestro_tags","text":"maestro tags follow format #' @maestroTagName","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a time string — parse_rounding_unit","title":"Parse a time string — parse_rounding_unit","text":"Parse time string","code":""},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a time string — parse_rounding_unit","text":"","code":"parse_rounding_unit(time_string)"},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a time string — parse_rounding_unit","text":"time_string string like 1 day, daily, 1 week, 12 hours, etc.","code":""},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a time string — parse_rounding_unit","text":"nunit list","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a schedule — run_schedule","title":"Run a schedule — run_schedule","text":"Given schedule maestro project, runs pipelines scheduled execute based current time.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a schedule — run_schedule","text":"","code":"run_schedule(   schedule,   orch_frequency = \"1 day\",   check_datetime = lubridate::now(tzone = \"UTC\"),   resources = list(),   run_all = FALSE,   n_show_next = 5,   cores = 1,   logging = lifecycle::deprecated(),   log_file = lifecycle::deprecated(),   log_file_max_bytes = 1e+06,   quiet = FALSE,   log_to_console = FALSE,   log_to_file = FALSE )"},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a schedule — run_schedule","text":"schedule object type MaestroSchedule created using build_schedule() orch_frequency orchestrator, single string formatted like \"1 day\", \"2 weeks\", \"hourly\", etc. check_datetime datetime check running pipelines (default current system time UTC) resources named list shared resources made available pipelines needed run_all run pipelines regardless schedule (default FALSE) - useful testing. apply pipes maestroSkip tag. n_show_next show next n scheduled pipes cores number cpu cores run running parallel. > 1, furrr used multisession plan must executed orchestrator (see details) logging whether write logs file (deprecated 0.5.0 - use log_to_file /log_to_console arguments instead) log_file path log file (ignored log_to_file == FALSE) (deprecated 0.5.0 - use log_to_file) log_file_max_bytes numeric specifying maximum number bytes allowed log file purging log (within margin error) quiet silence metrics console (default = FALSE). Note affect messages generated pipelines log_to_console = TRUE. log_to_console whether include pipeline messages, warnings, errors console (default = FALSE) (see Logging & Console Output section) log_to_file either boolean indicate whether create append maestro.log character path specific log file. FALSE NULL log file.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a schedule — run_schedule","text":"MaestroSchedule object","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"pipeline-schedule-logic","dir":"Reference","previous_headings":"","what":"Pipeline schedule logic","title":"Run a schedule — run_schedule","text":"function run_schedule() examines pipeline schedule table determines whether scheduled run current time using simple time arithmetic. assume run_schedule(schedule, check_datetime = Sys.time()), need case.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Run a schedule — run_schedule","text":"run_schedule() returns MaestroSchedule object modified attributes. Use get_status() examine status pipeline use get_artifacts() get return values pipelines list.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"pipelines-with-arguments-resources-","dir":"Reference","previous_headings":"","what":"Pipelines with arguments (resources)","title":"Run a schedule — run_schedule","text":"pipeline takes argument include default value, can supplied orchestrator via run_schedule(resources = list(arg1 = val)). name argument used pipeline must match name argument list. Currently, named resource must refer single object. words, two pipes using argument requiring different values.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"running-in-parallel","dir":"Reference","previous_headings":"","what":"Running in parallel","title":"Run a schedule — run_schedule","text":"Pipelines can run parallel using cores argument. First, must run future::plan(future::multisession) orchestrator. , supply desired number cores cores argument. Note console output appears different multicore mode.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"logging-amp-console-output","dir":"Reference","previous_headings":"","what":"Logging & Console Output","title":"Run a schedule — run_schedule","text":"default, maestro suppresses pipeline messages, warnings, errors appearing console, messages coming print() console logging packages like cli logger suppressed interwoven output generated run_schedule(). Messages cat() related functions always suppressed due nature functions operate standard output. Users advised make use R's message(), warning(), stop() functions pipelines managing conditions. Use log_to_console = TRUE print console. Maestro can generate log file appended time orchestrator run. Use log_to_file = TRUE log_to_file = '[path--file]' maestro create/append file project directory. log file appended exceeds byte size defined log_file_max_bytes argument log file deleted.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a schedule — run_schedule","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    # Runs the schedule every 1 day   run_schedule(     schedule,     orch_frequency = \"1 day\",     quiet = TRUE   )    # Runs the schedule every 15 minutes   run_schedule(     schedule,     orch_frequency = \"15 minutes\",     quiet = TRUE   ) }"},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the schedule as a DAG — show_network","title":"Visualize the schedule as a DAG — show_network","text":"Create interactive network visualization show dependency structure pipelines schedule. useful pipelines schedule take inputs/outputs pipelines.","code":""},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the schedule as a DAG — show_network","text":"","code":"show_network(schedule)"},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the schedule as a DAG — show_network","text":"schedule object type MaestroSchedule created using build_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the schedule as a DAG — show_network","text":"DiagrammeR visualization","code":""},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize the schedule as a DAG — show_network","text":"Note running function schedule independent pipelines produce network visual connections. function requires installation DiagrammeR automatically installed maestro.","code":""},{"path":"https://whipson.github.io/maestro/reference/show_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the schedule as a DAG — show_network","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)    schedule <- run_schedule(     schedule,     orch_frequency = \"1 day\",     quiet = TRUE   )    show_network(schedule) }"},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"Suggests frequency run orchestrator based frequencies pipelines schedule.","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"","code":"suggest_orch_frequency(   schedule,   check_datetime = lubridate::now(tzone = \"UTC\") )"},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"schedule MaestroSchedule object created build_schedule() check_datetime datetime check running pipelines (default current system time UTC)","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"frequency string","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"function attempts find smallest interval time pipelines. smallest interval less 15 minutes, just uses smallest interval. Note function intended used interactively deciding often schedule orchestrator. Programmatic use recommended.","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"","code":"if (interactive()) {   pipeline_dir <- tempdir()   create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE)   schedule <- build_schedule(pipeline_dir = pipeline_dir)   suggest_orch_frequency(schedule) }"},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.5.1","text":"Updated error messages documentation reflect maestroFrequency multiple weeks (e.g., 2 weeks) invalid.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-050","dir":"Changelog","previous_headings":"","what":"maestro 0.5.0","title":"maestro 0.5.0","text":"CRAN release: 2025-01-07","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"maestro 0.5.0","text":"Pipeline errors, warnings, messages can now printed console using run_schedule(log_to_console = TRUE). logs interwoven messages created maestro (#130). run_schedule() gains log_to_file argument specify whether log file (replaces logging log_file arguments).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"deprecated-functionality-0-5-0","dir":"Changelog","previous_headings":"","what":"Deprecated functionality","title":"maestro 0.5.0","text":"run_schedule() arguments logging log_file deprecated. Use log_to_file = TRUE log generic maestro.log file log_to_file = '[path---log-file]' log specific text file.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.5.0","text":"run_schedule() now warns unit orch_frequency lower frequency highest frequency pipeline project. run_schedule() enforces minimum orch_frequency 1 year (e.g., ‘2 years’ longer valid).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.5.0","text":"Message warning counts now properly displayed status output run_schedule(), well last_run_messages() last_run_warnings(), even maestroLogLevel. Fixed display run_schedule() accurate next run times pipelines. issue evident running orchestrator frequency daily lower.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-041","dir":"Changelog","previous_headings":"","what":"maestro 0.4.1","title":"maestro 0.4.1","text":"CRAN release: 2024-11-22","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.4.1","text":"Fixed issue pipelines dependency run time schedule even upstream pipeline didn’t run (vice versa). Fixed output next scheduled pipelines better reflect DAG structures.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-040","dir":"Changelog","previous_headings":"","what":"maestro 0.4.0","title":"maestro 0.4.0","text":"CRAN release: 2024-11-21","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"maestro 0.4.0","text":"Directed acyclic graph (DAG) pipelines - output one pipeline can feed another - now available using maestroOutputs maestroInputs tags. Pipelines input downstream pipeline use maestroOutputs tag. Pipelines receive input upstream pipeline use maestroInputs tag (#98). New function show_network visualizing connections pipelines connected DAG. MaestroSchedule gains new methods get_network() (returns data.frame) show_network() (returns visualization using {DiagrammeR}). Added catch-maestro tag identify function pipeline without specifying configurations.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.4.0","text":"skip argument added create_pipeline allow interactive creation pipelines default skip.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.4.0","text":"Fixed issue suggest_orch_frequency using different styles frequency (e.g., 1 day vs. daily) single schedule. Fixed issue pipeline sourcing failures appearing successful runs status outputs.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-030","dir":"Changelog","previous_headings":"","what":"maestro 0.3.0","title":"maestro 0.3.0","text":"CRAN release: 2024-09-23 version refactors much code base rely R6 classes pipelines schedules. Pay careful attention breaking changes see existing code may impacted.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.3.0","text":"Schedules now represented R6 object class <MaestroSchedule>. build_schedule() returns MaestroSchedule object can passed run_schedule() normal. access schedule table run get_schedule(). run_schedule() longer returns list $status $artifacts now returns/modifies MaestroSchedule object. Status can accessed using get_status(schedule) artifacts via get_artifacts(schedule) suggest_orch_frequency() now takes <MaestroSchedule> object. Data example_schedule removed package. Skipped pipelines longer shown CLI output run_schedule(). now required pipeline names unique. names maestro pipeline function must unique across project support implementation DAGs. build_schedule() abort non-unique names detected.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"maestro 0.3.0","text":"Added functions get_schedule(), get_status(), get_artifacts() interacting <MaestroSchedule> objects. Added function invoke() instantly run pipeline schedule.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"maestro 0.3.0","text":"Error messaging clearer running functions wrap around purrr iterators (#115).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-020","dir":"Changelog","previous_headings":"","what":"maestro 0.2.0","title":"maestro 0.2.0","text":"CRAN release: 2024-08-27","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"maestro 0.2.0","text":"New tags maestroHours, maestroDays, maestroMonths allows running pipelines specific hours day, days week, days month, months year (#100). maestroFrequency tag now accepts values hourly, daily, weekly, biweekly, monthly, quarterly, yearly. Argument orch_frequency run_schedule() also accepts values.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.2.0","text":"Changed example_schedule data pipeline schedule 1 minute 30 minutes keeping best practices minimum pipeline frequency. suggest_orch_frequency now uses smallest interval two pipelines (#99).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"maestro 0.2.0","text":"Error messages unintentional overwrites create_*() functions correctly reference name path directory overwritten. Fixed cli output run_schedule() show skipped pipelines next run portion.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-012","dir":"Changelog","previous_headings":"","what":"maestro 0.1.2","title":"maestro 0.1.2","text":"CRAN release: 2024-08-01","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"maestro 0.1.2","text":"Fixed cli output correctly handle counting successful runs pipelines skipped. Performance improvements build_schedule() (#101).","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.1.1","text":"Creater functions create_pipeline() create_maestro longer default arguments path scripts created. Users must explicitly define paths. Argument log_file run_schedule() longer defaults ./maestro.log instead defaults NULL.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.1.1","text":"Creater functions create_* now take boolean overwrite argument make overwriting existing pipelines, projects, orchestrators explicit.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-010","dir":"Changelog","previous_headings":"","what":"maestro 0.1.0","title":"maestro 0.1.0","text":"Initial CRAN submission","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.0.4","text":"Fixed output next run pipelines (#90)","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.0.3","text":"run_schedule() now returns list status artifacts instead just data.frame status. Artifacts values returned pipelines. Pipelines return nothing artifacts.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"major-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Major changes","title":"maestro 0.0.3","text":"New helper function suggest_orch_frequency() provide suggestion frequency use orchestrator.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.0.3","text":"Start end times now reported functions result error single core (#82).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.0.3","text":"CLI output run_schedule() now correctly outputs total number pipelines (#81) correctly outputs number errors.","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.0.2","text":"maestroFrequency tag now adheres human-readable format like “1 day”, “2 hours”, “4 weeks”, etc. orch_frequency argument run_schedule() also takes human-readable format identical maestroFrequency tag. maestroInterval tag removed orch_interval argument run_schedule() removed. create_maestro() create_orchestrator() now use argument type instead extension defining script type use orchestrator. Changed last_parsing_errors() last_build_errors(); changed functions form last_runtime_*() last_run_*().","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"major-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Major changes","title":"maestro 0.0.2","text":"Additional columns added output run_schedule(): pipeline_started pipeline_ended indicate start end times pipeline execution; next_run indicate next run based frequency pipeline orchestrator. Pipelines now show skipped scheduled. Added hex logo","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.0.2","text":"Backend improvements schedule checking Timestamps formatted specified time zone. run_schedule() cli output suggests use last_run_errors() last_run_warnings() errors warnings found.","code":""}]
