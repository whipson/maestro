[{"path":"https://whipson.github.io/maestro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 maestro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"project-setup","dir":"Articles","previous_headings":"","what":"Project Setup","title":"Quick Start","text":"Create maestro project existing project new project using create_maestro() New Project wizard RStudio. creates orchestrator script folder pipelines one sample pipeline. project look something like :","code":"library(maestro) maestro_project ├── maestro_project.Rproj ├── orchestrator.R └── pipelines     ├── my_pipe.R     └── another_pipe.R"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Quick Start","text":"Pipelines jobs want automate, schedule, monitor. part, ’re regular R functions special sprinkling comments.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"anatomy-of-a-pipeline","dir":"Articles","previous_headings":"Pipelines","what":"Anatomy of a Pipeline","title":"Quick Start","text":"pipeline simply R function decorators called maestro tags. Maestro tags special code comments used communicating scheduling configuration pipeline orchestrator. Let’s take quick look sample my_pipe.R: my_pipe function empty body - right now won’t anything. comments interpreted maestro “function scheduled run every day starting 2024-05-24 (00:00:00) UTC time”. maestroFrequency maestroStartTime important tags scheduling. Frequency often want pipeline run can formatted single string like hourly, daily, weekly, biweekly, etc. number unit (e.g., 1 day, 3 hours, etc.). Note don’t need provide tags. single maestro tag enough distinguish pipeline. Pipelines missing tags use consistent defaults (e.g., maestroFrequency missing default 1 day/daily). use cases, actual code inside my_pipe run ETL job (extract data source, transform , load file system database). technical terms, ’s side effect code return value important. ’s realistic, albeit impractical, example:","code":"#' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24 #' @maestroTz UTC #' @maestroLogLevel INFO  my_pipe <- function() {    # Pipeline code } #' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24 #' @maestroTz UTC #' @maestroLogLevel INFO  my_pipe <- function() {    random_data <- data.frame(     letters = sample(letters, 10),     numbers = sample.int(10)   )      write.csv(random_data, file = tempfile()) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"adding-new-pipelines","dir":"Articles","previous_headings":"Pipelines","what":"Adding New Pipelines","title":"Quick Start","text":"project single pipeline ok, maestro useful multiple jobs run. can add pipelines pipelines directory manually use create_pipeline():","code":"create_pipeline(   pipe_name = \"another_pipeline\",   pipeline_dir = \"pipelines\",   frequency = \"1 hour\",   start_time = \"2024-05-17 15:00:00\",   tz = \"America/Halifax\",   log_level = \"ERROR\" )"},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"orchestrator","dir":"Articles","previous_headings":"","what":"Orchestrator","title":"Quick Start","text":"orchestrator process schedules monitors pipelines.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-1-quick-start.html","id":"anatomy-of-the-orchestrator","dir":"Articles","previous_headings":"Orchestrator","what":"Anatomy of the Orchestrator","title":"Quick Start","text":"orchestrator can R script, Quarto/RMarkdown doc, ’ll use regular R script. ’ll run maestro functions. two main functions build_schedule() run_schedule(). Building schedule gets maestro look pipelines pipelines folder creates data.frame schedule information. , pass data.frame run_schedule() along often orchestrator supposed run. important tell maestro often ’ll checking pipelines using orch_frequency parameter. , ’re informing orchestrator running every 1 hour. Importantly, isn’t maestro’s job actually run often - ’s job make sure runs frequency (e.g., deploying via cron cloud environment code can scheduled).1","code":"library(maestro)  schedule_table <- build_schedule()  output <- run_schedule(   schedule_table,   orch_frequency = \"1 hour\" )"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"what-is-maestro","dir":"Articles","previous_headings":"","what":"What is maestro?","title":"Motivation and Concepts","text":"maestro R package creating orchestrating many data pipelines R. several batch jobs/pipelines want schedule monitor within single R project, maestro . decorate R functions special roxygen2 tags execute orchestrator script:","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"why-do-i-need-maestro","dir":"Articles","previous_headings":"","what":"Why do I need maestro?","title":"Motivation and Concepts","text":"Running data pipelines essential component data engineering. unusual dozens pipelines need run different frequencies, go deploy pipelines scheduling monitoring quickly becomes unwieldy. Perhaps ’ve considered moving heftier orchestration suites Airflow, Dagster, others require learning entirely new skills pose challenges deployment. maestro allows orchestrate pipelines entirely R. need environment deploy maestro project.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"Motivation and Concepts","text":"pipeline process takes raw data (often external source) moves somewhere else often transforming along way. Think pipeline factory assembly line data raw material. data travels along pipeline, undergoes various transformations—cleaning, aggregation, analysis—making increasingly refined valuable. refined product stored new location can used either end consumer another pipeline. prototypical type pipeline data engineering ETL (Extract, Transform, Load), data extracted source, transformed, loaded storage.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"scheduled-batch-processing","dir":"Articles","previous_headings":"Pipelines","what":"Scheduled Batch Processing","title":"Motivation and Concepts","text":"pipeline needs run regularly automatically process new data. analytic workloads undergo batch processing - processing data discrete timed batches. scheduled batch processing, engineer decide often want pipeline run (every day 12:00?, every hour 15th minute?). maestro pipeline R function roxygen2 comments scheduling configuration:","code":"#' my_pipe maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-05-24  my_pipe <- function() {    random_data <- data.frame(     letters = sample(letters, 10),     numbers = sample.int(10)   )      write.csv(random_data, file = tempfile()) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"orchestrator","dir":"Articles","previous_headings":"","what":"Orchestrator","title":"Motivation and Concepts","text":"orchestrator process triggers pipelines run. Think factory manager turns various assembly lines needed. also monitors pipelines ensure smooth operation. Just like factory manager, orchestrator operates “shifts” needs scheduled perform ’s job .","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"rounded-scheduling","dir":"Articles","previous_headings":"Orchestrator","what":"Rounded Scheduling","title":"Motivation and Concepts","text":"Importantly, maestro needs know often ’re going run orchestrator. Unlike orchestration tools , maestro isn’t intended continuously running, saves compute resources. means pipelines won’t necessarily run exactly ’re scheduled . concept call rounded scheduling. Let’s say pipeline scheduled run hourly 02 minute mark (e.g., 01:02, 02:02, etc.), orchestrator runs every hour 00 minute. orchestrator runs, ’ll slightly pipeline scheduled time, ’ll trigger pipeline anyway ’s close enough within frequency orchestrator. instead orchestrator ran every 15 minutes, ’d still execute pipeline hour. underprovisioned orchestrator ran every day, pipeline execute day. important guideline orchestrator needs run least frequency highest frequency pipeline. maestro orchestrator R script Quarto like : passing orch_frequency = \"1 hour\" run_schedule(), ’re saying intend run orchestrator every 1 hour.","code":"library(maestro)  schedule_table <- build_schedule()  run_schedule(   schedule_table,   orch_frequency = \"1 hour\" )"},{"path":[]},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"r-targets","dir":"Articles","previous_headings":"Comparison with other packages","what":"{R} targets","title":"Motivation and Concepts","text":"targets “pipeline tool statistics data science R”. multiple connected components pipeline, targets skips computation tasks --date. targets seems primarily used projects single output (e.g., model, document) multiple steps cumulatively take long time complete. contrast, maestro focused projects multiple independent pipelines. Moreover, maestro pipelines primarily used --dateness source data unknown (e.g., coming API database), unlike targets determines --dateness based contents file. said, targets maestro may complimentary single project. One possible case use maestro orchestrate targets pipelines tasks ETL (e.g., maestro kicks pipeline downstream computations avoided ’s new data source). possible exciting integration hope investigate !","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"python-dagster","dir":"Articles","previous_headings":"Comparison with other packages","what":"{Python} dagster","title":"Motivation and Concepts","text":"Dagster “open source orchestration platform development, production, observation data assets”. Like maestro, dagster uses decorators (special comments) configure data assets (functions). Unlike maestro, dagster primarily chaining together dependent components multi-step pipeline - DAG. also supports developer UI fully developed maestro current time. DAG support something ’ve considered maestro. seems feasible dramatic step complexity package. Conceivably, tag maestro pipelines form dependency graph maestro validate graph coordinate chaining passing data one component next.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"when-to-not-use-maestro","dir":"Articles","previous_headings":"","what":"When to not use maestro?","title":"Motivation and Concepts","text":"maestro can used almost data engineering task can performed R, cases less appropriate use .","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"streaming-and-event-driven","dir":"Articles","previous_headings":"When to not use maestro?","what":"Streaming and Event-driven","title":"Motivation and Concepts","text":"maestro support streaming (.e., continuous) event-driven pipelines. batch processes can run maestro.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"hundreds-of-pipelines","dir":"Articles","previous_headings":"When to not use maestro?","what":"Hundreds of pipelines","title":"Motivation and Concepts","text":"Although hard limit number pipelines can run maestro (ways maximizing efficiency number pipelines increases, using multiple cores), advise using maestro run many pipelines - least single project. several reasons : (1) orchestrator execution time become problem even multiple cores; (2) organizing keeping track many pipelines single R project becomes difficult; (3) number dependencies manage project likely balloon. wish continue using maestro scenario, recommendation split jobs multiple projects running maestro. Nevertheless, hundreds jobs run ’s likely indicator enterprise matured maestro something bit sophisticated.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"high-frequency-jobs","dir":"Articles","previous_headings":"When to not use maestro?","what":"High frequency jobs","title":"Motivation and Concepts","text":"pipelines need run every minute less may want look solution supports near real time real time data processing. orchestrator may trouble keeping ’s scheduled run often.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-2-motivation-concepts.html","id":"multiple-languages-r-python","dir":"Articles","previous_headings":"When to not use maestro?","what":"Multiple languages (R + Python)","title":"Motivation and Concepts","text":"maestro R pipelines . Using reticulate may help Python pinch though.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-3-use-cases.html","id":"hourly-pipeline","dir":"Articles","previous_headings":"","what":"Hourly Pipeline","title":"Use Cases","text":"pipeline example standard extract transform load (ETL) workflow. pipeline scheduled run every 3 hours starting 2024-04-25 05:45:00. goal pipeline perform following: access online hosted CSV file perform lite data wrangling write file local storage parquet format example setup simple set tasks creating objects used next series tasks. components pipeline within pipeline_wildfire_hourly function, parameters.","code":"#' pipeline_wildfire_hourly maestro pipeline #' #' @maestroFrequency 3 hour #' @maestroStartTime 2024-04-25 05:45:00 #' @maestroTz America/Halifax   pipeline_wildfire_hourly <- function() {      # load libraries   library(dplyr)   library(readr)   library(sf)   library(sfarrow)    # Access active wildfire data from hosted csv   df <- readr::read_csv(\"https://cwfis.cfs.nrcan.gc.ca/downloads/activefires/activefires.csv\")      # Data wrangling   df_geom <- df |>     dplyr::mutate(insert_datetime = Sys.time()) |>     sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)         # Write active wildfires to file   basename <- paste(\"cdn_wildfire\", as.integer(Sys.time()), sep = \"_\")      df_geom |>     sfarrow::write_sf_dataset(\"~/data/wildfires\",                               format = \"parquet\",                               basename_template = paste0(basename,                                                          \"-{i}.parquet\")) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-3-use-cases.html","id":"daily-pipeline","dir":"Articles","previous_headings":"","what":"Daily Pipeline","title":"Use Cases","text":"pipeline example standard extract transform load (ETL) workflow. pipeline scheduled run every day starting 2024-04-25 06:30:00. goal pipeline perform following: submit request API extract data API add insert datetime column write file local storage parquet format example custom function used access extract data API, piped additional tasks. components pipeline within pipeline_climate_daily function, parameters.","code":"#' pipeline_climate_daily maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-04-25 06:30:00 #' @maestroTz America/Halifax  pipeline_climate_daily <- function() {      # load libraries   library(dplyr)   library(httr2)   library(arrow)      # Custom function for accessing api climate data   get_hourly_climate_info <- function(station_id, request_limit = 24) {      # Validate parameters   stopifnot(\"`station_id` must be a real number\" = is.numeric(station_id) && station_id > 0)   stopifnot(\"`station_id` must be a length-one vector\" = length(station_id) == 1)      # Access climate hourly via geomet api    hourly_req <- httr2::request(\"https://api.weather.gc.ca/collections/climate-hourly/items\") |>      httr2::req_url_query(       lang = \"en-CA\",       offset = 0,       CLIMATE_IDENTIFIER = station_id,       LOCAL_DATE = Sys.Date() - 1,       limit = request_limit     )      # Perform the request   hourly_resp <- hourly_req |>      httr2::req_perform()      # Climate station response to data frame   geomet_json <- hourly_resp |>      httr2::resp_body_json(simplifyVector = TRUE)      geomet_json$features   }      # Write climate hourly to file   basename <- paste(\"climate_hourly\", as.integer(Sys.time()), sep = \"_\")    get_hourly_climate_info(8202251) |>     dplyr::mutate(insert_datetime = Sys.time()) |>     arrow::write_dataset(       \"~/data/climate\",       format = \"parquet\",       basename_template = basename       ) }"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"stateless-execution","dir":"Articles","previous_headings":"","what":"Stateless Execution","title":"Advanced Scheduling","text":"Maestro takes unique approach scheduling compared orchestration tools. Whereas schedulers involve continuously running program monitor time execute jobs current time right, maestro designed run intermittently. also doesn’t need save cache data executions - words, ’s stateless. design several benefits; namely, can run serverless way saves compute resources. However, achieve takes shortcuts may mean precise timeliness lost. become clearer examples.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"rounded-scheduling","dir":"Articles","previous_headings":"","what":"Rounded Scheduling","title":"Advanced Scheduling","text":"timeliness pipeline measured close scheduled execution time actual execution time. Maestro timely needs relative unit time interested . concept rounded scheduling. run orchestrator daily, timeliness pipelines within nearest day - doesn’t care specified pipeline run exactly 09:21:20 day. run every 10 minutes, timeliness pipelines within nearest 10 minute interval. Let’s look examples: First, ’ll consider one pipeline scheduled run daily 09:20:00 ’ll configure orchestrator run daily. demonstration purposes, ’ll manually set check time 08:00:00 UTC (time maestro use compare scheduled time). practice, almost always want system time using either Sys.time() lubridate::now(). can see pipeline executed even though current time 09:20:00. set orchestrator run daily considers close enough within day. Let’s see happens frequency orchestrator: skipped wasn’t within 15 minute degree difference output tells us next run 2024-06-20 09:15:00. takeaway message timeliness pipeline depends frequently orchestrator runs. Remember declare orch_frequency = \"15 minutes\" essentially contract stating run every 15 minutes - maestro . run orchestrator less frequently said unexpected things happen. Specifically, run frequently stated, pipelines run often expected, likewise less frequently stated means pipelines won’t run often.","code":"# ./pipelines/daily_example.R #' daily_example maestro pipeline #' #' @maestroFrequency 1 day #' @maestroStartTime 2024-06-20 09:20:00 daily_example <- function() {    # Pipeline code } # ./orchestrator.R  library(maestro)  schedule <- build_schedule() ## ℹ 1 script successfully parsed status <- run_schedule(   schedule,   orch_frequency = \"1 day\",   check_datetime = as.POSIXct(\"2024-06-20 08:00:00\", tz = \"UTC\") ) ##  ## ── Running pipelines ▶  ## ℹ ./pipelines/daily_example.R daily_example ## ✔ ./pipelines/daily_example.R daily_example [53ms] ##  ##  ## ── Pipeline execution completed ■ | 0.07 sec elapsed  ## ✔ 1 success | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 1 total ## ──────────────────────────────────────────────────────────────────────────────── ##  ## ── Next scheduled pipelines ❯  ## Pipe name | Next scheduled run ## • daily_example | 2024-06-20 # ./orchestrator.R status <- run_schedule(   schedule,   orch_frequency = \"15 minutes\",   check_datetime = as.POSIXct(\"2024-06-20 08:00:00\", tz = \"UTC\") ) ## ## ── Running pipelines ▶ ## → ./pipelines/daily_example.R daily_example ## ## ── Pipeline execution completed ■ | 0.004 sec elapsed ## ✔ 0 successes | → 1 skipped | ! 0 warnings | ✖ 0 errors | ◼ 1 total ## ──────────────────────────────────────────────────────────────────────────────── ## ## ── Next scheduled pipelines ❯ ## Pipe name | Next scheduled run ## • daily_example | 2024-06-20 09:15:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"how-often-should-i-schedule-my-orchestrator","dir":"Articles","previous_headings":"","what":"How often should I schedule my orchestrator?","title":"Advanced Scheduling","text":"single pipeline even multiple pipelines run time easy question answer. practice (experience using maestro production) multiple pipelines run different intervals different times. Maybe run hourly, run daily, others run monthly.","code":""},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"example-1","dir":"Articles","previous_headings":"How often should I schedule my orchestrator?","what":"Example 1","title":"Advanced Scheduling","text":"Let’s say three pipelines following frequencies start times: good starting point schedule often highest frequency pipeline project - 1 hour example. run *:30:00 minute day, pipe1 execute nearly exactly scheduled time pipelines executed 30 minutes early. ’re comfortable margin error ’s big deal, orchestrator frequency 30 minutes ensure pipelines run scheduled exactly. Let’s see another example:","code":"##    name frequency          start_time ## 1 pipe1    1 hour 2024-06-18 12:30:00 ## 2 pipe2    2 days 2024-06-18 06:00:00 ## 3 pipe3  4 months 2024-06-20 00:00:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"example-2","dir":"Articles","previous_headings":"How often should I schedule my orchestrator?","what":"Example 2","title":"Advanced Scheduling","text":"three pipelines hourly start different 10-minute intervals. run orchestrator 1 hour ’ll execute time. important execute different times, set 10 minutes. good heuristic run often smallest interval time difference pipeline. pretty good long don’t run often pipelines can’t complete next execution time. don’t recommend running orchestrator frequently every 5 minutes unless ’re confident pipelines fast execute.1 Maestro function providing reasonable estimate ideal orchestrator frequency called suggest_orch_frequency(). uses heuristic frequent interval halved (e.g., highest frequency pipeline 1 hour, suggests 30 minutes) minimum 15 minutes frequent interval ’s less. bit conservative protects running things often. timeliness high frequency really important , maestro might best choice.","code":"##    name frequency          start_time ## 1 pipe4    1 hour 2024-06-18 00:00:00 ## 2 pipe5    1 hour 2024-06-18 00:10:00 ## 3 pipe6    1 hour 2024-06-18 00:20:00"},{"path":"https://whipson.github.io/maestro/articles/maestro-4-advanced-scheduling.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Advanced Scheduling","text":"comes time deploy project make sure whatever use actually run project (e.g., cron, TaskScheduler, Google Cloud Scheduler, etc.) indeed running frequency orchestrator. ’s best stick using whole units time rather fractional units - orchestrator runs every 15 minutes like run 00:00, 15:00, 30:00, 45:00 minutes. makes reasoning scheduling simpler.","code":""},{"path":"https://whipson.github.io/maestro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hipson. Maintainer, author, copyright holder. Ryan Garnett. Author, contributor, copyright holder.","code":""},{"path":"https://whipson.github.io/maestro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hipson W, Garnett R (2024). maestro: Orchestration Data Pipelines. R package version 0.2.0.9000, https://whipson.github.io/maestro/, https://github.com/whipson/maestro.","code":"@Manual{,   title = {maestro: Orchestration of Data Pipelines},   author = {Will Hipson and Ryan Garnett},   year = {2024},   note = {R package version 0.2.0.9000, https://whipson.github.io/maestro/},   url = {https://github.com/whipson/maestro}, }"},{"path":"https://whipson.github.io/maestro/index.html","id":"maestro-","dir":"","previous_headings":"","what":"Orchestration of Data Pipelines","title":"Orchestration of Data Pipelines","text":"maestro lightweight framework creating orchestrating data pipelines R. core, maestro R script scheduler unique two ways: Stateless: need continuously running - can run serverless architecture Use rounded scheduling: timeliness pipeline executions depends often run orchestrator maestro create pipelines (functions) schedule using roxygen2 tags - special comments (decorators) function. create orchestrator containing maestro functions scheduling invoking pipelines.","code":""},{"path":"https://whipson.github.io/maestro/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Orchestration of Data Pipelines","text":"maestro available CRAN can installed via: , try development version via:","code":"install.packages(\"maestro\") devtools::install_github(\"https://github.com/whipson/maestro\")"},{"path":"https://whipson.github.io/maestro/index.html","id":"project-setup","dir":"","previous_headings":"","what":"Project Setup","title":"Orchestration of Data Pipelines","text":"maestro project needs least two components: collection R pipelines (functions) want schedule single orchestrator script kicks scripts ’re scheduled run project file structure look like : Let’s look detail.","code":"sample_project ├── orchestrator.R └── pipelines     ├── my_etl.R     ├── pipe1.R     └── pipe2.R"},{"path":"https://whipson.github.io/maestro/index.html","id":"pipelines","dir":"","previous_headings":"Project Setup","what":"Pipelines","title":"Orchestration of Data Pipelines","text":"pipeline task want run. task may involve retrieving data source, performing cleaning computation data, sending destination. maestro concerned pipeline , rather want run . ’s simple pipeline maestro: makes maestro pipeline use special roxygen-style comments function definition: #' @maestroFrequency 1 day indicates function execute daily frequency. #' @maestroStartTime 2024-03-25 12:30:00 denotes first time run. words, ’d expect run every day 12:30 starting 25th March 2024. maestro tags ones follow camelCase convention established roxygen2.","code":"#' Example ETL pipeline #' @maestroFrequency 1 day #' @maestroStartTime 2024-03-25 12:30:00 my_etl <- function() {      # Pretend we're getting data from a source   message(\"Get data\")   extracted <- mtcars      # Transform   message(\"Transforming\")   transformed <- extracted |>      dplyr::mutate(hp_deviation = hp - mean(hp))      # Load - write to a location   message(\"Writing\")   write.csv(transformed, file = paste0(\"transformed_mtcars_\", Sys.Date(), \".csv\")) }"},{"path":"https://whipson.github.io/maestro/index.html","id":"orchestrator","dir":"","previous_headings":"Project Setup","what":"Orchestrator","title":"Orchestration of Data Pipelines","text":"orchestrator script checks schedules pipelines maestro project executes . orchestrator also handles global execution tasks collecting logs managing shared resources like global objects custom functions. option using Quarto, RMarkdown, straight-R script orchestrator, former two advantages respect deployment Posit Connect. simple orchestrator looks like :  function build_schedule() scours pipelines project builds schedule. run_schedule() checks pipeline’s scheduled time system time within margin rounding calls pipelines run.","code":"library(maestro)  # Look through the pipelines directory for maestro pipelines to create a schedule schedule_table <- build_schedule(pipeline_dir = \"pipelines\")  # Checks which pipelines are due to run and then executes them output <- run_schedule(   schedule_table,    orch_frequency = \"1 day\" )"},{"path":"https://whipson.github.io/maestro/index.html","id":"multicore","dir":"","previous_headings":"Project Setup","what":"Multicore","title":"Orchestration of Data Pipelines","text":"several pipelines /pipelines take awhile run, can efficient split computation across multiple CPU cores.","code":"library(furrr)  plan(multisession)  run_schedule(   schedule_table,   cores = 4 )"},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a schedule table — build_schedule","title":"Build a schedule table — build_schedule","text":"Builds schedule data.frame scheduling pipelines run_schedule().","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a schedule table — build_schedule","text":"","code":"build_schedule(pipeline_dir = \"./pipelines\", quiet = FALSE)"},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a schedule table — build_schedule","text":"pipeline_dir path directory containing pipeline scripts quiet silence metrics console (default = FALSE)","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a schedule table — build_schedule","text":"data.frame","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a schedule table — build_schedule","text":"function parses maestro tags functions located pipeline_dir conventionally called 'pipelines'. orchestrator requires schedule table determine pipelines run . row schedule table pipeline name scheduling parameters frequency. schedule table mostly intended used run_schedule() immediately. words, recommended make changes .","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a schedule table — build_schedule","text":"","code":"# Creating a temporary directory for demo purposes! In practice, just # create a 'pipelines' directory at the project level. pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE) #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R build_schedule(pipeline_dir = pipeline_dir) #> ℹ 1 script successfully parsed #> # A tibble: 1 × 8 #>   script_path            pipe_name frequency start_time          skip  log_level #>   <chr>                  <chr>     <chr>     <dttm>              <lgl> <chr>     #> 1 /tmp/Rtmp3OCmNm/my_ne… my_new_p… 1 day     2024-08-08 00:00:00 FALSE INFO      #> # ℹ 2 more variables: frequency_n <int>, frequency_unit <chr>"},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create schedule table entry from a script — build_schedule_entry","title":"Create schedule table entry from a script — build_schedule_entry","text":"Create schedule table entry script","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create schedule table entry from a script — build_schedule_entry","text":"","code":"build_schedule_entry(script_path)"},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create schedule table entry from a script — build_schedule_entry","text":"script_path path script","code":""},{"path":"https://whipson.github.io/maestro/reference/build_schedule_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create schedule table entry from a script — build_schedule_entry","text":"data.frame row","code":""},{"path":"https://whipson.github.io/maestro/reference/check_pipelines.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which pipelines are scheduled to run and when next pipelines will run — check_pipelines","title":"Check which pipelines are scheduled to run and when next pipelines will run — check_pipelines","text":"Check pipelines scheduled run next pipelines run","code":""},{"path":"https://whipson.github.io/maestro/reference/check_pipelines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which pipelines are scheduled to run and when next pipelines will run — check_pipelines","text":"","code":"check_pipelines(   orch_unit,   orch_n,   pipeline_unit,   pipeline_n,   check_datetime,   pipeline_datetime )"},{"path":"https://whipson.github.io/maestro/reference/check_pipelines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which pipelines are scheduled to run and when next pipelines will run — check_pipelines","text":"orch_unit unit time orchestrator orch_n number units orchestrator pipeline_unit unit pipeline frequency pipeline_n number units pipeline frequency check_datetime datetime check running pipelines (default current system time UTC) pipeline_datetime datetime first time pipeline run","code":""},{"path":"https://whipson.github.io/maestro/reference/check_pipelines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which pipelines are scheduled to run and when next pipelines will run — check_pipelines","text":"list","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a duration string to number of seconds — convert_to_seconds","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"Convert duration string number seconds","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"","code":"convert_to_seconds(time_string)"},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"time_string string like 1 day, 2 weeks, 12 hours, etc.","code":""},{"path":"https://whipson.github.io/maestro/reference/convert_to_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a duration string to number of seconds — convert_to_seconds","text":"number seconds","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a new maestro project — create_maestro","title":"Creates a new maestro project — create_maestro","text":"Creates new maestro project","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a new maestro project — create_maestro","text":"","code":"create_maestro(path, type = \"R\", overwrite = FALSE, quiet = FALSE, ...)"},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a new maestro project — create_maestro","text":"path file path orchestrator script type file type orchestrator (supports R, Quarto, RMarkdown) overwrite whether overwrite existing orchestrator maestro project quiet whether silence messages console (default = FALSE) ... unused","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a new maestro project — create_maestro","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_maestro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a new maestro project — create_maestro","text":"","code":"# Creates a new maestro project with an R orchestrator new_proj_dir <- tempdir() create_maestro(new_proj_dir, type = \"R\", overwrite = TRUE) #> ! Overwriting existing project. #> ✔ Creating maestro project  create_maestro(new_proj_dir, type = \"Quarto\", overwrite = TRUE) #> ! Overwriting existing project. #> ✔ Creating maestro project"},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new orchestrator — create_orchestrator","title":"Create a new orchestrator — create_orchestrator","text":"Create new orchestrator","code":""},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new orchestrator — create_orchestrator","text":"","code":"create_orchestrator(   path,   type = c(\"R\", \"Quarto\", \"RMarkdown\"),   open = interactive(),   quiet = FALSE,   overwrite = FALSE )"},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new orchestrator — create_orchestrator","text":"path file path orchestrator script type file type orchestrator (supports R, Quarto, RMarkdown) open whether open script upon creation quiet whether silence messages console (default = FALSE) overwrite whether overwrite existing orchestrator maestro project","code":""},{"path":"https://whipson.github.io/maestro/reference/create_orchestrator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new orchestrator — create_orchestrator","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new pipeline in a pipelines directory — create_pipeline","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"Allows creation new pipelines (R scripts) fills maestro tags specified.","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"","code":"create_pipeline(   pipe_name,   pipeline_dir = \"pipelines\",   frequency = \"1 day\",   start_time = Sys.Date(),   tz = \"UTC\",   log_level = \"INFO\",   quiet = FALSE,   open = interactive(),   overwrite = FALSE )"},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"pipe_name name pipeline function pipeline_dir directory containing pipeline scripts frequency often pipeline run (e.g., 1 day, daily, 3 hours, 4 months). Fills maestroFrequency tag start_time start time pipeline schedule. Fills maestroStartTime tag tz timezone pipeline scheduled . Fills maestroTz tag log_level log level pipeline (e.g., INFO, WARN, ERROR). Fills maestroLogLevel tag quiet whether silence messages console (default = FALSE) open whether open script upon creation overwrite whether overwrite existing pipeline name location.","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/create_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new pipeline in a pipelines directory — create_pipeline","text":"","code":"pipeline_dir <- tempdir() create_pipeline(   \"extract_data\",   pipeline_dir = pipeline_dir,   frequency = \"1 hour\",   open = FALSE,   quiet = TRUE,   overwrite = TRUE )  create_pipeline(   \"new_job\",   pipeline_dir = pipeline_dir,   frequency = \"20 minutes\",   start_time = as.POSIXct(\"2024-06-21 12:20:00\"),   log_level = \"ERROR\",   open = FALSE,   quiet = TRUE,   overwrite = TRUE )  # Clean up if (!interactive()) unlink(\"pipelines\", recursive = TRUE)"},{"path":"https://whipson.github.io/maestro/reference/example_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Example schedule — example_schedule","title":"Example schedule — example_schedule","text":"example properly formatted schedule build_schedule()","code":""},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"Generate sequence run times pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"","code":"get_pipeline_run_sequence(   pipeline_n,   pipeline_unit,   pipeline_datetime,   check_datetime )"},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"pipeline_n number units pipeline frequency pipeline_unit unit pipeline frequency pipeline_datetime datetime first time pipeline run check_datetime datetime check running pipelines (default current system time UTC)","code":""},{"path":"https://whipson.github.io/maestro/reference/get_pipeline_run_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a sequence of run times for a pipeline — get_pipeline_run_sequence","text":"vector timestamps dates","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro build errors — last_build_errors","title":"Retrieve latest maestro build errors — last_build_errors","text":"Gets latest schedule build errors following use build_schedule(). build succeeded build_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro build errors — last_build_errors","text":"","code":"last_build_errors()"},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro build errors — last_build_errors","text":"error messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_build_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro build errors — last_build_errors","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` #> # A tibble: 3 × 8 #>   script_path            pipe_name frequency start_time          skip  log_level #>   <chr>                  <chr>     <chr>     <dttm>              <lgl> <chr>     #> 1 /tmp/Rtmp3OCmNm/extra… extract_… 1 hour    2024-08-08 00:00:00 FALSE INFO      #> 2 /tmp/Rtmp3OCmNm/my_ne… my_new_p… 1 day     2024-08-08 00:00:00 FALSE INFO      #> 3 /tmp/Rtmp3OCmNm/new_j… new_job   20 minut… 2024-06-21 12:20:00 FALSE ERROR     #> # ℹ 2 more variables: frequency_n <int>, frequency_unit <chr> last_build_errors() #> $orchestrator.R #> <error/rlang_error> #> Error: #> ! Could not build schedule entry with error: No directory called #>   ./pipelines #> ℹ Pipeline scripts should not typically include code that's run outside of a #>   function. Be sure to wrap code in a function block. #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         ├─pkgdown:::unwrap_purrr_error(...) #>   6.         │ └─base::withCallingHandlers(...) #>   7.         └─purrr::map(...) #>   8.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ├─purrr:::with_indexed_errors(...) #>  10.             │ └─base::withCallingHandlers(...) #>  11.             ├─purrr:::call_with_cleanup(...) #>  12.             └─pkgdown (local) .f(.x[[i]], ...) #>  13.               ├─base::withCallingHandlers(...) #>  14.               └─pkgdown:::data_reference_topic(...) #>  15.                 └─pkgdown:::run_examples(...) #>  16.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  17.                     └─downlit::evaluate_and_highlight(...) #>  18.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         └─evaluate:::evaluate_call(...) #>  20.                           ├─evaluate (local) timing_fn(...) #>  21.                           ├─evaluate (local) handle(...) #>  22.                           │ └─base::try(f, silent = TRUE) #>  23.                           │   └─base::tryCatch(...) #>  24.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  25.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  26.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  27.                           ├─base::withCallingHandlers(...) #>  28.                           ├─base::withVisible(...) #>  29.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  30.                             └─base::eval(expr, envir, enclos) #>  31.                               └─base::eval(expr, envir, enclos) #>  32.                                 └─maestro::build_schedule(pipeline_dir = pipeline_dir) #>  33.                                   ├─stats::setNames(...) #>  34.                                   └─purrr::map(pipelines, purrr::safely(build_schedule_entry)) #>  35.                                     └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>  36.                                       ├─purrr:::with_indexed_errors(...) #>  37.                                       │ └─base::withCallingHandlers(...) #>  38.                                       ├─purrr:::call_with_cleanup(...) #>  39.                                       └─purrr (local) .f(.x[[i]], ...) #>  40.                                         ├─purrr:::capture_error(.f(...), otherwise, quiet) #>  41.                                         │ └─base::tryCatch(...) #>  42.                                         │   └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  43.                                         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  44.                                         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  45.                                         └─maestro (local) .f(...) #>  46.                                           ├─base::suppressMessages(...) #>  47.                                           │ └─base::withCallingHandlers(...) #>  48.                                           └─base::tryCatch(...) #>  49.                                             └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  50.                                               ├─base (local) tryCatchOne(...) #>  51.                                               │ └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  52.                                               └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh]) #>  53.                                                 └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  54.                                                   └─value[[3L]](cond) #>"},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline errors — last_run_errors","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"Gets latest pipeline errors following use run_schedule(). runs succeeded run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"","code":"last_run_errors()"},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"error messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline errors — last_run_errors","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R schedule <- build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` run_schedule(schedule) #>  #> ── Running pipelines ▶  #> ℹ /tmp/Rtmp3OCmNm/extract_data.R extract_data #> ✔ /tmp/Rtmp3OCmNm/extract_data.R extract_data [14ms] #>  #> ℹ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline #> ✔ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline [10ms] #>  #> ℹ /tmp/Rtmp3OCmNm/new_job.R new_job #> ✔ /tmp/Rtmp3OCmNm/new_job.R new_job [10ms] #>  #>  #> ── Pipeline execution completed ■ | 0.073 sec elapsed  #> ✔ 3 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ── Next scheduled pipelines ❯  #> Pipe name | Next scheduled run #> • extract_data | 2024-08-10 #> • my_new_pipeline | 2024-08-10 #> • new_job | 2024-08-10 #> $status #> # A tibble: 3 × 10 #>   pipe_name  script_path invoked success pipeline_started    pipeline_ended      #>   <chr>      <chr>       <lgl>   <lgl>   <dttm>              <dttm>              #> 1 extract_d… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 2 my_new_pi… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 3 new_job    /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> # ℹ 4 more variables: errors <int>, warnings <int>, messages <int>, #> #   next_run <dttm> #>  #> $artifacts #> named list() #>  last_run_errors() #> named list()"},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline messages — last_run_messages","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"Gets latest pipeline messages following use run_schedule(). messages run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"","code":"last_run_messages()"},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"Note setting maestroLogLevel something greater INFO ignore messages.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline messages — last_run_messages","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R schedule <- build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` run_schedule(schedule) #>  #> ── Running pipelines ▶  #> ℹ /tmp/Rtmp3OCmNm/extract_data.R extract_data #> ✔ /tmp/Rtmp3OCmNm/extract_data.R extract_data [10ms] #>  #> ℹ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline #> ✔ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline [10ms] #>  #> ℹ /tmp/Rtmp3OCmNm/new_job.R new_job #> ✔ /tmp/Rtmp3OCmNm/new_job.R new_job [10ms] #>  #>  #> ── Pipeline execution completed ■ | 0.06 sec elapsed  #> ✔ 3 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ── Next scheduled pipelines ❯  #> Pipe name | Next scheduled run #> • extract_data | 2024-08-10 #> • my_new_pipeline | 2024-08-10 #> • new_job | 2024-08-10 #> $status #> # A tibble: 3 × 10 #>   pipe_name  script_path invoked success pipeline_started    pipeline_ended      #>   <chr>      <chr>       <lgl>   <lgl>   <dttm>              <dttm>              #> 1 extract_d… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 2 my_new_pi… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 3 new_job    /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> # ℹ 4 more variables: errors <int>, warnings <int>, messages <int>, #> #   next_run <dttm> #>  #> $artifacts #> named list() #>  last_run_messages() #> named list()"},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve latest maestro pipeline warnings — last_run_warnings","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"Gets latest pipeline warnings following use run_schedule(). warnings run_schedule() run NULL.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"","code":"last_run_warnings()"},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"warning messages","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"Note setting maestroLogLevel something greater WARN ignore warnings.","code":""},{"path":"https://whipson.github.io/maestro/reference/last_run_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve latest maestro pipeline warnings — last_run_warnings","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R schedule <- build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` run_schedule(schedule) #>  #> ── Running pipelines ▶  #> ℹ /tmp/Rtmp3OCmNm/extract_data.R extract_data #> ✔ /tmp/Rtmp3OCmNm/extract_data.R extract_data [10ms] #>  #> ℹ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline #> ✔ /tmp/Rtmp3OCmNm/my_new_pipeline.R my_new_pipeline [9ms] #>  #> ℹ /tmp/Rtmp3OCmNm/new_job.R new_job #> ✔ /tmp/Rtmp3OCmNm/new_job.R new_job [10ms] #>  #>  #> ── Pipeline execution completed ■ | 0.055 sec elapsed  #> ✔ 3 successes | → 0 skipped | ! 0 warnings | ✖ 0 errors | ◼ 3 total #> ──────────────────────────────────────────────────────────────────────────────── #>  #> ── Next scheduled pipelines ❯  #> Pipe name | Next scheduled run #> • extract_data | 2024-08-10 #> • my_new_pipeline | 2024-08-10 #> • new_job | 2024-08-10 #> $status #> # A tibble: 3 × 10 #>   pipe_name  script_path invoked success pipeline_started    pipeline_ended      #>   <chr>      <chr>       <lgl>   <lgl>   <dttm>              <dttm>              #> 1 extract_d… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 2 my_new_pi… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> 3 new_job    /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:31 2024-08-08 16:42:31 #> # ℹ 4 more variables: errors <int>, warnings <int>, messages <int>, #> #   next_run <dttm> #>  #> $artifacts #> named list() #>  last_run_warnings() #> named list()"},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":null,"dir":"Reference","previous_headings":"","what":"maestro package — maestro","title":"maestro package — maestro","text":"Lightweight pipeline orchestration R","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"maestro package — maestro","text":"Documentation: GitHub","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/maestro.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"maestro package — maestro","text":"Maintainer: Hipson .e.hipson@gmail.com (ORCID) [copyright holder] Authors: Ryan Garnett ryangarnett78@gmail.com [contributor, copyright holder]","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"cli output for generate schedule table — maestro_parse_cli","title":"cli output for generate schedule table — maestro_parse_cli","text":"cli output generate schedule table","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cli output for generate schedule table — maestro_parse_cli","text":"","code":"maestro_parse_cli(parse_succeeds, parse_errors)"},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cli output for generate schedule table — maestro_parse_cli","text":"parse_succeeds list parse results (.e., succeeded) parse_errors list parse errors","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_parse_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cli output for generate schedule table — maestro_parse_cli","text":"cli output","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Maestro Tags — maestro_tags","title":"Maestro Tags — maestro_tags","text":"maestro tags roxygen2 comments configuring scheduling execution pipelines.","code":""},{"path":"https://whipson.github.io/maestro/reference/maestro_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maestro Tags — maestro_tags","text":"maestro tags follow format #' @maestroTagName","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a time string — parse_rounding_unit","title":"Parse a time string — parse_rounding_unit","text":"Parse time string","code":""},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a time string — parse_rounding_unit","text":"","code":"parse_rounding_unit(time_string)"},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a time string — parse_rounding_unit","text":"time_string string like 1 day, daily, 2 weeks, 12 hours, etc.","code":""},{"path":"https://whipson.github.io/maestro/reference/parse_rounding_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a time string — parse_rounding_unit","text":"nunit list","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a schedule — run_schedule","title":"Run a schedule — run_schedule","text":"Given schedule maestro project, runs pipelines scheduled execute based current time.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a schedule — run_schedule","text":"","code":"run_schedule(   schedule,   orch_frequency = \"1 day\",   check_datetime = lubridate::now(tzone = \"UTC\"),   resources = list(),   run_all = FALSE,   n_show_next = 5,   cores = 1,   logging = FALSE,   log_file = NULL,   log_file_max_bytes = 1e+06,   quiet = FALSE )"},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a schedule — run_schedule","text":"schedule table scheduled pipelines generated build_schedule() orch_frequency orchestrator, single string formatted like \"1 day\", \"2 weeks\", \"hourly\", etc. check_datetime datetime check running pipelines (default current system time UTC) resources named list shared resources made available pipelines needed run_all run pipelines regardless schedule (default FALSE) - useful testing. apply pipes maestroSkip tag. n_show_next show next n scheduled pipes cores number cpu cores run running parallel. > 1, furrr used multisession plan must executed orchestrator (see details) logging whether write logs file (default = FALSE) log_file path log file (ignored logging == FALSE) log_file_max_bytes numeric specifying maximum number bytes allowed log file purging log (within margin error) quiet silence metrics console (default = FALSE)","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a schedule — run_schedule","text":"list named elements status artifacts","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"pipeline-schedule-logic","dir":"Reference","previous_headings":"","what":"Pipeline schedule logic","title":"Run a schedule — run_schedule","text":"function run_schedule() examines pipeline schedule table determines whether scheduled run current time using simple time arithmetic. assume run_schedule(schedule, check_datetime = Sys.time()), need case.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Run a schedule — run_schedule","text":"run_schedule() returns list two elements: status artifacts. Status data.frame row pipeline columns information pipeline status, execution time, etc. Artifacts values returned pipelines.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"pipelines-with-arguments-resources-","dir":"Reference","previous_headings":"","what":"Pipelines with arguments (resources)","title":"Run a schedule — run_schedule","text":"pipeline takes argument include default value, can supplied orchestrator via run_schedule(resources = list(arg1 = val)). name argument used pipeline must match name argument list. Currently, named resource must refer single object. words, two pipes using argument requiring different values.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"running-in-parallel","dir":"Reference","previous_headings":"","what":"Running in parallel","title":"Run a schedule — run_schedule","text":"Pipelines can run parallel using cores argument. First, must run future::plan(future::multisession) orchestrator. , supply desired number cores cores argument. Note console output appears different multicore mode.","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a schedule — run_schedule","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R schedule <- build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` # Runs the schedule every 1 day run_schedule(   schedule,   orch_frequency = \"1 day\",   quiet = TRUE ) #> $status #> # A tibble: 3 × 10 #>   pipe_name  script_path invoked success pipeline_started    pipeline_ended      #>   <chr>      <chr>       <lgl>   <lgl>   <dttm>              <dttm>              #> 1 extract_d… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:33 2024-08-08 16:42:33 #> 2 my_new_pi… /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:33 2024-08-08 16:42:33 #> 3 new_job    /tmp/Rtmp3… TRUE    TRUE    2024-08-08 16:42:33 2024-08-08 16:42:33 #> # ℹ 4 more variables: errors <int>, warnings <int>, messages <int>, #> #   next_run <dttm> #>  #> $artifacts #> named list() #>   # Runs the schedule every 15 minutes run_schedule(   schedule,   orch_frequency = \"15 minutes\",   quiet = TRUE ) #> $status #> # A tibble: 3 × 10 #>   pipe_name  script_path invoked success pipeline_started pipeline_ended #>   <chr>      <chr>       <lgl>   <lgl>   <dttm>           <dttm>         #> 1 extract_d… /tmp/Rtmp3… FALSE   NA      NA               NA             #> 2 my_new_pi… /tmp/Rtmp3… FALSE   NA      NA               NA             #> 3 new_job    /tmp/Rtmp3… FALSE   NA      NA               NA             #> # ℹ 4 more variables: errors <int>, warnings <int>, messages <int>, #> #   next_run <dttm> #>  #> $artifacts #> named list() #>"},{"path":"https://whipson.github.io/maestro/reference/run_schedule_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a single pipeline — run_schedule_entry","title":"Runs a single pipeline — run_schedule_entry","text":"Runs single pipeline","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a single pipeline — run_schedule_entry","text":"","code":"run_schedule_entry(   script_path,   pipe_name,   resources = list(),   log_file = NULL,   log_level = \"INFO\",   log_file_max_bytes )"},{"path":"https://whipson.github.io/maestro/reference/run_schedule_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a single pipeline — run_schedule_entry","text":"script_path path script containing pipeline pipe_name name pipeline resources list resources pipeline log_file path log file log_level log level log_file_max_bytes numeric specifying maximum number bytes allowed log file purging log (within margin error)","code":""},{"path":"https://whipson.github.io/maestro/reference/run_schedule_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a single pipeline — run_schedule_entry","text":"invisible","code":""},{"path":"https://whipson.github.io/maestro/reference/schedule_validity_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of a schedule — schedule_validity_check","title":"Checks the validity of a schedule — schedule_validity_check","text":"Checks validity schedule","code":""},{"path":"https://whipson.github.io/maestro/reference/schedule_validity_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of a schedule — schedule_validity_check","text":"","code":"schedule_validity_check(schedule)"},{"path":"https://whipson.github.io/maestro/reference/schedule_validity_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of a schedule — schedule_validity_check","text":"schedule schedule table returned build_schedule","code":""},{"path":"https://whipson.github.io/maestro/reference/schedule_validity_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of a schedule — schedule_validity_check","text":"invisible error","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"Suggests frequency run orchestrator based frequencies pipelines schedule.","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"","code":"suggest_orch_frequency(   schedule,   check_datetime = lubridate::now(tzone = \"UTC\") )"},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"schedule schedule data.frame created build_schedule() check_datetime datetime check running pipelines (default current system time UTC)","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"frequency string","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"function attempts find smallest interval time pipelines. smallest interval less 15 minutes, just uses smallest interval. Note function intended used interactively deciding often schedule orchestrator. Programmatic use recommended.","code":""},{"path":"https://whipson.github.io/maestro/reference/suggest_orch_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest orchestrator frequency based on a schedule — suggest_orch_frequency","text":"","code":"pipeline_dir <- tempdir() create_pipeline(\"my_new_pipeline\", pipeline_dir, open = FALSE, overwrite = TRUE) #> ! Overwriting existing pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R. #> ✔ Created pipeline at /tmp/Rtmp3OCmNm/my_new_pipeline.R schedule <- build_schedule(pipeline_dir = pipeline_dir) #> ℹ 3 scripts successfully parsed #> Warning: 1 script failed to parse: #> ! Could not build schedule entry with error: No directory called ./pipelines #> ℹ See full error output with `last_build_errors()` suggest_orch_frequency(schedule) #> [1] \"20 mins\""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"major-changes-0-2-0-9000","dir":"Changelog","previous_headings":"","what":"Major changes","title":"maestro 0.2.0.9000","text":"maestroFrequency tag now accepts values hourly, daily, weekly, biweekly, monthly, quarterly, yearly. Argument orch_frequency run_schedule() also accepts values.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-2-0-9000","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.2.0.9000","text":"Changed example_schedule data pipeline schedule 1 minute 30 minutes keeping best practices minimum pipeline frequency. suggest_orch_frequency now uses smallest interval two pipelines (#99).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-2-0-9000","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"maestro 0.2.0.9000","text":"Error messages unintentional overwrites create_*() functions correctly reference name path directory overwritten. Fixed cli output run_schedule() show skipped pipelines next run portion.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-012","dir":"Changelog","previous_headings":"","what":"maestro 0.1.2","title":"maestro 0.1.2","text":"CRAN release: 2024-08-01","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"maestro 0.1.2","text":"Fixed cli output correctly handle counting successful runs pipelines skipped. Performance improvements build_schedule() (#101).","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.1.1","text":"Creater functions create_pipeline() create_maestro longer default arguments path scripts created. Users must explicitly define paths. Argument log_file run_schedule() longer defaults ./maestro.log instead defaults NULL.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.1.1","text":"Creater functions create_* now take boolean overwrite argument make overwriting existing pipelines, projects, orchestrators explicit.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"maestro-010","dir":"Changelog","previous_headings":"","what":"maestro 0.1.0","title":"maestro 0.1.0","text":"Initial CRAN submission","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-0-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.0.4","text":"Fixed output next run pipelines (#90)","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.0.3","text":"run_schedule() now returns list status artifacts instead just data.frame status. Artifacts values returned pipelines. Pipelines return nothing artifacts.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"major-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Major changes","title":"maestro 0.0.3","text":"New helper function suggest_orch_frequency() provide suggestion frequency use orchestrator.","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.0.3","text":"Start end times now reported functions result error single core (#82).","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"maestro 0.0.3","text":"CLI output run_schedule() now correctly outputs total number pipelines (#81) correctly outputs number errors.","code":""},{"path":[]},{"path":"https://whipson.github.io/maestro/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"maestro 0.0.2","text":"maestroFrequency tag now adheres human-readable format like “1 day”, “2 hours”, “4 weeks”, etc. orch_frequency argument run_schedule() also takes human-readable format identical maestroFrequency tag. maestroInterval tag removed orch_interval argument run_schedule() removed. create_maestro() create_orchestrator() now use argument type instead extension defining script type use orchestrator. Changed last_parsing_errors() last_build_errors(); changed functions form last_runtime_*() last_run_*().","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"major-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Major changes","title":"maestro 0.0.2","text":"Additional columns added output run_schedule(): pipeline_started pipeline_ended indicate start end times pipeline execution; next_run indicate next run based frequency pipeline orchestrator. Pipelines now show skipped scheduled. Added hex logo","code":""},{"path":"https://whipson.github.io/maestro/news/index.html","id":"minor-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"maestro 0.0.2","text":"Backend improvements schedule checking Timestamps formatted specified time zone. run_schedule() cli output suggests use last_run_errors() last_run_warnings() errors warnings found.","code":""}]
